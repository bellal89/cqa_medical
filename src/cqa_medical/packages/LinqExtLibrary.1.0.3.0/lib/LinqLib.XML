<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqLib</name>
    </assembly>
    <members>
        <member name="T:LinqLib.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.exceptionApplyAttempt">
            <summary>
              Looks up a localized string similar to {0} cannot be applied to &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.exceptionMatchType">
            <summary>
              Looks up a localized string similar to Cannot handle Match Type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.exceptionMissingFieldOrProperty">
            <summary>
              Looks up a localized string similar to The property or field {0} cannot be found..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excption2DFlip">
            <summary>
              Looks up a localized string similar to Two dimensional arrays cannot be flipped on the &apos;{0}&apos; axis..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excption3DFlip">
            <summary>
              Looks up a localized string similar to Three dimensional arrays cannot be flipped on the &apos;{0}&apos; axis..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excption3DRotation">
            <summary>
              Looks up a localized string similar to Three dimensional arrays cannot be rotated on the &apos;{0}&apos; axis..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excption4DFlip">
            <summary>
              Looks up a localized string similar to Four dimensional arrays cannot be flipped on the &apos;{0}&apos; axis..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excption4DRotate">
            <summary>
              Looks up a localized string similar to Four dimensional arrays cannot be rotated on the &apos;{0}&apos; axis..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionDynamicPropertyAccess">
            <summary>
              Looks up a localized string similar to Error accessing dynamic property: &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidAngle">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid rotation angle. Angle value must be divisible by 90..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidGenerateGenericType">
            <summary>
              Looks up a localized string similar to Generate&lt;T&gt; cannot be invoked using &apos;{0}&apos; type, only numeric values are valid..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidItemsCount">
            <summary>
              Looks up a localized string similar to sources must have exactly {0} elements..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidNoiseFilterType">
            <summary>
              Looks up a localized string similar to This override of RemoveNoise cannot be used with filter type &apos;AbsoluteValue&apos;..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidNoiseFilterTypeLimits">
            <summary>
              Looks up a localized string similar to When calling RemoveNoise with &apos;AbsoluteValue&apos; filter type option upperLimit cannot be equal to lowerLimit..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidRangeGenericType">
            <summary>
              Looks up a localized string similar to Range&lt;T&gt; cannot be invoked using &apos;{0}&apos; type, only numeric values are valid..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidSkipCount">
            <summary>
              Looks up a localized string similar to Skip must be one or larger..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionInvalidTakeCount">
            <summary>
              Looks up a localized string similar to Take must be one or larger..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionParamMaxRange">
            <summary>
              Looks up a localized string similar to parameter {0} is out of range max value is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionParamMinRange">
            <summary>
              Looks up a localized string similar to parameter {0} is out of range min value is &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionRoundingDigits">
            <summary>
              Looks up a localized string similar to Rounding digits must be between 0 and {0}, inclusive..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionSequenceMinOne">
            <summary>
              Looks up a localized string similar to Sequence must have 1 or more elements..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionSequenceMinTwo">
            <summary>
              Looks up a localized string similar to Sequence must have two or more elements..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionSequenceMinTwoNotNull">
            <summary>
              Looks up a localized string similar to Sequence must have two or more non null elements..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionSourceSequenceIsNull">
            <summary>
              Looks up a localized string similar to Element {0} of sources cannot be null..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionStepDuration">
            <summary>
              Looks up a localized string similar to Step time cannot be zero..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionValueMinBlockSize">
            <summary>
              Looks up a localized string similar to Sequence must have more items than the blockSize..
            </summary>
        </member>
        <member name="P:LinqLib.Properties.Resources.excptionValueMinTwo">
            <summary>
              Looks up a localized string similar to Value must be larger than or equal to two..
            </summary>
        </member>
        <member name="T:LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs">
            <summary>
            Provides information 
            </summary>
        </member>
        <member name="M:LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs.#ctor(System.String,System.String,System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            Initializes a new instance of ClassGenerationEventArgs class.
            </summary>
            <param name="basePath">The base path of all the generated files.</param>
            <param name="codeFile">The path of the generated CS file.</param>
            <param name="output">Compiler output information.</param>
            <param name="hasErrors">Indicates if errors occurred during compilation.</param>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs.BasePath">
            <summary>
            The base path of all the generated files.
            </summary>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs.CodeFile">
            <summary>
            The path of the generated CS file.
            </summary>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs.HasError">
            <summary>
            Gets a value that indicates whether the generation process contains errors.
            </summary>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs.Output">
            <summary>
            The compiler output information.
            </summary>
        </member>
        <member name="T:LinqLib.Array.Add`1">
            <summary>
            Adds two specified T type values
            </summary>
            <typeparam name="T">The type of the values to add.</typeparam>
            <param name="x">First T type value to add.</param>
            <param name="y">Second T type value to add.</param>
            <returns>A T value that is the sum of x and y.</returns>
        </member>
        <member name="T:LinqLib.Array.Subtract`1">
            <summary>
            Subtracts two specified T type values
            </summary>
            <typeparam name="T">The type of the values to subtract.</typeparam>
            <param name="x">The T type value to subtract from.</param>
            <param name="y">The T type value to subtract.</param>
            <returns>A T value that is the difference between x and y.</returns>
        </member>
        <member name="T:LinqLib.Array.Multiply`1">
            <summary>
            Multiplies a specified T type value by the specified double value.
            </summary>
            <typeparam name="T">The type of the value to multiply.</typeparam>
            <param name="x">The type of the values to multiply.</param>
            <param name="y">A double value used to multiply the x value.</param>
            <returns>A T value that is the result of multiplying x and y.</returns>
        </member>
        <member name="T:LinqLib.Array.Divide`1">
            <summary>
            Divides a specified T type value by the specified double value.
            </summary>
            <typeparam name="T">The type of the value to divide.</typeparam>
            <param name="x">The type of the values to divide.</param>
            <param name="y">A double value used to divide the x value.</param>
            <returns>A T value that is the result of dividing x by y.</returns>
        </member>
        <member name="T:LinqLib.Array.ArrayExtensions">
            <summary>
            Provides array manipulation methods.
            </summary>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Slice``1(``0[0:,0:])">
            <summary>
            Slices a two dimensional array into a sequence of single dimensional arrays.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The array to slice.</param>
            <returns>An enumerable of one dimensional arrays.</returns>
            <remarks>Slicing occurs on the Y axis. Each array represents a row from source array.</remarks>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not a primitive.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Slice``1(``0[0:,0:,0:])">
            <summary>
            Slices a three dimensional array into a sequence of two dimensional arrays.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The array to slice.</param>
            <returns>An enumerable of two dimensional arrays.</returns>
            <remarks>Slicing occurs on the Z axis. Each array represents a sheet from source array.</remarks>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not a primitive.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Slice``1(``0[0:,0:,0:,0:])">
            <summary>
            Slices a four dimensional array into a sequence of three dimensional arrays.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The array to slice.</param>
            <returns>An enumerable of three dimensional arrays.</returns>
            <remarks>Slicing occurs on the A axis. Each array represents a cube from source array.</remarks>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not a primitive.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Fuse``1(System.Collections.Generic.IEnumerable{``0[]})">
            <summary>
            Fuses a two dimensional array from a sequence of single dimensional arrays.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The sequence to fuse.</param>
            <returns>An two dimensional array.</returns>    
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not a primitive.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Fuse``1(System.Collections.Generic.IEnumerable{``0[0:,0:]})">
            <summary>
            Fuses a three dimensional array from a sequence of two dimensional arrays.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The sequence to fuse.</param>
            <returns>An three dimensional array.</returns>    
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not a primitive.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Fuse``1(System.Collections.Generic.IEnumerable{``0[0:,0:,0:]})">
            <summary>
            Fuses a four dimensional array from a sequence of three dimensional arrays.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The sequence to fuse.</param>
            <returns>An four dimensional array.</returns>    
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">T is not a primitive.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[],System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array and moves forward one element at the time.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>        
            <param name="x">The size of each new array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[],System.Int32,System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array but can overlap other arrays in the sequence.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="x">The size of each new array.</param>    
            <param name="xStep">The number of elements to progress when creating the next array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x or xStep are out of valid range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array and moves forward one element at the time on each axis.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>        
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array but can overlap other arrays in the sequence.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <param name="yStep">The number of elements to progress on the Y axis when creating the next array.</param>
            <param name="xStep">The number of elements to progress on the X axis when creating the next array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y, xStep or yStep is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array and moves forward one element at the time on each axis.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>        
            <param name="z">The Z size of each new array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array but can overlap other arrays in the sequence.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="z">The Z size of each new array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <param name="zStep">The number of elements to progress on the Z axis when creating the next array.</param>
            <param name="yStep">The number of elements to progress on the Y axis when creating the next array.</param>
            <param name="xStep">The number of elements to progress on the X axis when creating the next array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y, z, xStep, yStep or zStep is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array and moves forward one element at the time on each axis.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>    
            <param name="a">The A size of each new array.</param>
            <param name="z">The Z size of each new array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.CircularShift``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits and shifts an array into a sequence of smaller arrays. Each resulting array is a contiguous subset of the source array but can overlap other arrays in the sequence.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="a">The A size of each new array.</param>
            <param name="z">The Z size of each new array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <param name="aStep">The number of elements to progress on the A axis when creating the next array.</param>
            <param name="zStep">The number of elements to progress on the Z axis when creating the next array.</param>
            <param name="yStep">The number of elements to progress on the Y axis when creating the next array.</param>
            <param name="xStep">The number of elements to progress on the X axis when creating the next array.</param>
            <returns>A sequence of arrays, each represents a section of the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y, z, a, xStep, yStep, zStep or aStep is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Split``1(``0[],System.Int32)">
            <summary>
            Splits an array into a sequence of smaller arrays. Each array starts where previous array ends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="x">Size of each new array.</param>
            <returns>A sequence of arrays, each represents a unique, Contiguous section of the source array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Split``1(``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Splits an array into a sequence of smaller arrays. Each array starts where previous array ends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <returns>A sequence of arrays, each represents a unique, Contiguous section of the source array.</returns>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Split``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits an array into a sequence of smaller arrays. Each array starts where previous array ends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>    
            <param name="z">The Z size of each new array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <returns>A sequence of arrays, each represents a unique, Contiguous section of the source array.</returns>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Split``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Splits an array into a sequence of smaller arrays. Each array starts where previous array ends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="a">The A size of each new array.</param>
            <param name="z">The Z size of each new array.</param>
            <param name="y">The Y size of each new array.</param>
            <param name="x">The X size of each new array.</param>
            <returns>A sequence of arrays, each represents a unique, Contiguous section of the source array.</returns>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Converts a sequence of elements into an array.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence to convert.</param>
            <param name="x">Size of the new array.</param>    
            <returns>A single dimension array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Converts a sequence of elements into a two dimensional array.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence to convert.</param>
            <param name="y">Size of the first dimension.</param>
            <param name="x">Size of the second dimension.</param>    
            <returns>A two dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x or y is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a sequence of elements into a three dimensional array.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence to convert.</param>
            <param name="z">Size of the first dimension.</param>
            <param name="y">Size of the second dimension.</param>
            <param name="x">Size of the third dimension.</param>
            <returns>A three dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y or z is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a sequence of elements into a four dimensional array.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">Source sequence to convert.</param>
            <param name="a">Size of the first dimension.</param>
            <param name="z">Size of the second dimension.</param>
            <param name="y">Size of the third dimension.</param>
            <param name="x">Size of the fourth dimension.</param>
            <returns>A four dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y, z or a is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Double[],System.Int32)">
            <summary>
            Resizes an array of doubles while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="newSize">The size of the new array.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">newSize is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Double[0:,0:],System.Int32,System.Int32)">
            <summary>
            Resizes an array of doubles while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x or y is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Double[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes an array of doubles while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="z">New size of the Z axis.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y or z is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Double[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes an array of doubles while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="a">New size of the A axis.</param>
            <param name="z">New size of the Z axis.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y, z or a is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Single[],System.Int32)">
            <summary>
            Resizes an array of floats while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="newSize">The size of the new array.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">newSize is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Single[0:,0:],System.Int32,System.Int32)">
            <summary>
            Resizes an array of floats while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x or y is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Single[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes an array of floats while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="z">New size of the Z axis.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y or z is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize(System.Single[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes an array of floats while preserving its content and trends. 
            </summary>
            <param name="source">The source array.</param>
            <param name="a">New size of the A axis.</param>
            <param name="z">New size of the Z axis.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">x, y, z or a is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize``1(``0[],LinqLib.Array.Add{``0},LinqLib.Array.Subtract{``0},LinqLib.Array.Multiply{``0},LinqLib.Array.Divide{``0},System.Int32)">
            <summary>
            Resizes an array of elements while preserving its content and trends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="adder">A function to use when adding two T elements.</param>
            <param name="subtractor">A function to use when subtracting two T elements.</param>
            <param name="multiplier">A function to use when multiplying a T element.</param>
            <param name="divider">A function to use when dividing a T element.</param>
            <param name="newSize">the new size of the array.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source, adder, subtractor, multiplier or divider is null.</exception>
            <exception cref="T:System.ArgumentException">newSize is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize``1(``0[0:,0:],LinqLib.Array.Add{``0},LinqLib.Array.Subtract{``0},LinqLib.Array.Multiply{``0},LinqLib.Array.Divide{``0},System.Int32,System.Int32)">
            <summary>
            Resizes an array of elements while preserving its content and trends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="adder">A function to use when adding two T elements.</param>
            <param name="subtractor">A function to use when subtracting two T elements.</param>
            <param name="multiplier">A function to use when multiplying a T element.</param>
            <param name="divider">A function to use when dividing a T element.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source, adder, subtractor, multiplier or divider is null.</exception>
            <exception cref="T:System.ArgumentException">x or y is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize``1(``0[0:,0:,0:],LinqLib.Array.Add{``0},LinqLib.Array.Subtract{``0},LinqLib.Array.Multiply{``0},LinqLib.Array.Divide{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes an array of elements while preserving its content and trends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="adder">A function to use when adding two T elements.</param>
            <param name="subtractor">A function to use when subtracting two T elements.</param>
            <param name="multiplier">A function to use when multiplying a T element.</param>
            <param name="divider">A function to use when dividing a T element.</param>    
            <param name="z">New size of the Z axis.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source, adder, subtractor, multiplier or divider is null.</exception>
            <exception cref="T:System.ArgumentException">x, y or z is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Resize``1(``0[0:,0:,0:,0:],LinqLib.Array.Add{``0},LinqLib.Array.Subtract{``0},LinqLib.Array.Multiply{``0},LinqLib.Array.Divide{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Resizes an array of elements while preserving its content and trends. 
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="adder">A function to use when adding two T elements.</param>
            <param name="subtractor">A function to use when subtracting two T elements.</param>
            <param name="multiplier">A function to use when multiplying a T element.</param>
            <param name="divider">A function to use when dividing a T element.</param>
            <param name="a">New size of the A axis.</param>
            <param name="z">New size of the Z axis.</param>
            <param name="y">New size of the Y axis.</param>
            <param name="x">New size of the X axis.</param>
            <returns>The newly resized array.</returns>
            <exception cref="T:System.ArgumentNullException">source, adder, subtractor, multiplier or divider is null.</exception>    
            <exception cref="T:System.ArgumentException">x, y, z or a is out of range.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Rotate``1(``0[0:,0:],System.Int32)">
            <summary>
            Rotates a two dimensional array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array to rotate</param>
            <param name="angle">Degrees of rotation.</param>
            <returns>a rotated copy of source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid angle.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Rotate``1(``0[0:,0:,0:],LinqLib.Array.RotateAxis,System.Int32)">
            <summary>
            Rotates a three dimensional array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array to rotate</param>
            <param name="axis">The axis to perform the rotation on.</param>
            <param name="angle">Degrees of rotation.</param>
            <returns>a rotated copy of source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid axis.</exception>    
            <exception cref="T:System.ArgumentException">Invalid angle.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Rotate``1(``0[0:,0:,0:,0:],LinqLib.Array.RotateAxis,System.Int32)">
            <summary>
            Rotates a four dimensional array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array to rotate</param>
            <param name="axis">The axis to perform the rotation on.</param>
            <param name="angle">Degrees of rotation.</param>
            <returns>a rotated copy of source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid axis.</exception>    
            <exception cref="T:System.ArgumentException">Invalid angle.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Flip``1(``0[])">
            <summary>
            Flips elements in an array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array to flip</param>
            <returns>A flipped copy of the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Flip``1(``0[0:,0:],LinqLib.Array.FlipAxis)">
            <summary>
            Flips elements in an array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array to flip</param>
            <param name="axis">The axis to flip on.  Axis flag can combine multiple valid axis</param>
            <returns>A flipped copy of the source array.</returns> 
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid axis.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Flip``1(``0[0:,0:,0:],LinqLib.Array.FlipAxis)">
            <summary>
            Flips elements in an array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array to flip</param>
            <param name="axis">The axis to flip on.  Axis flag can combine multiple valid axis</param>
            <returns>A flipped copy of the source array.</returns>    
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Invalid axis.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Replace``1(``0[],``0[],System.Int32)">
            <summary>
            Replaces a section in one array with content from another array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="newSection">An array with values used to replace content of source array.</param>
            <param name="offset">Zero based offset to start the replacement.</param>
            <exception cref="T:System.ArgumentNullException">source or newSection is null.</exception>
            <exception cref="T:System.ArgumentException">offset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Replace``1(``0[0:,0:],``0[0:,0:],System.Int32,System.Int32)">
            <summary>
            Replaces a section in one array with content from another array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="newSection">An array with values used to replace content of source array.</param> 
            <param name="yOffset">Zero based offset from the Y origin to start the replacement.</param>
            <param name="xOffset">Zero based offset from the X origin to start the replacement.</param>
            <exception cref="T:System.ArgumentNullException">source or newSection is null.</exception>
            <exception cref="T:System.ArgumentException">yOffset or xOffset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Replace``1(``0[0:,0:,0:],``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces a section in one array with content from another array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="newSection">An array with values used to replace content of source array.</param> 
            <param name="zOffset">Zero based offset from the Z origin to start the replacement.</param>
            <param name="yOffset">Zero based offset from the Y origin to start the replacement.</param>
            <param name="xOffset">Zero based offset from the X origin to start the replacement.</param>
            <exception cref="T:System.ArgumentNullException">source or newSection is null.</exception>
            <exception cref="T:System.ArgumentException">zOffset, yOffset or xOffset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Replace``1(``0[0:,0:,0:,0:],``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces a section in one array with content from another array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="newSection">An array with values used to replace content of source array.</param> 
            <param name="zOffset">Zero based offset from the Z origin to start the replacement.</param>
            <param name="aOffset">Zero based offset from the A origin to start the replacement.</param>
            <param name="yOffset">Zero based offset from the Y origin to start the replacement.</param>
            <param name="xOffset">Zero based offset from the X origin to start the replacement.</param>
            <exception cref="T:System.ArgumentNullException">source or newSection is null.</exception>
            <exception cref="T:System.ArgumentException">aOffset, zOffset, yOffset or xOffset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Extract``1(``0[],System.Int32,System.Int32)">
            <summary>
            Extract an array of values from the source array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>
            <param name="offset">Zero based offset to start extraction from.</param>
            <param name="length">Number of elements to extract.</param>
            <returns>An array with values from the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">offset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Extract``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract an array of values from the source array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>    
            <param name="yOffset">Zero based offset to start extraction from Y origin.</param>
            <param name="xOffset">Zero based offset to start extraction from X origin.</param>    
            <param name="yLength">Number of elements to extract on the Y axis.</param>
            <param name="xLength">Number of elements to extract on the X axis.</param> 
            <returns>An array with values from the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">yOffset or xOffset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Extract``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract an array of values from the source array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>                
            <param name="zOffset">Zero based offset to start extraction from Z origin.</param>
            <param name="yOffset">Zero based offset to start extraction from Y origin.</param>
            <param name="xOffset">Zero based offset to start extraction from X origin.</param>        
            <param name="zLength">Number of elements to extract on the Z axis.</param>
            <param name="yLength">Number of elements to extract on the Y axis.</param>
            <param name="xLength">Number of elements to extract on the X axis.</param>
            <returns>An array with values from the source array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">zOffset, yOffset or xOffset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.Extract``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Extract an array of values from the source array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">The source array.</param>            
            <param name="aOffset">Zero based offset to start extraction from A origin.</param>
            <param name="zOffset">Zero based offset to start extraction from Z origin.</param>
            <param name="yOffset">Zero based offset to start extraction from Y origin.</param>
            <param name="xOffset">Zero based offset to start extraction from X origin.</param>    
            <param name="aLength">Number of elements to extract on the A axis.</param>
            <param name="zLength">Number of elements to extract on the Z axis.</param>
            <param name="yLength">Number of elements to extract on the Y axis.</param>
            <param name="xLength">Number of elements to extract on the X axis.</param>
            <returns>An array with values from the source array.</returns>    
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">aOffset, zOffset, yOffset or xOffset is out of range.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.AsEnumerable(System.Array)">
            <summary>
            Converts an array to a sequence implementing IEnumerable. 
            </summary>
            <param name="source">The array to convert.</param>
            <returns>A sequence of all array elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.AsEnumerable``1(System.Array)">
            <summary>
            Converts an array to a sequence implementing IEnumerable. 
            </summary>
            <typeparam name="T">The type of the elements of the source array.</typeparam>
            <param name="source">The array to convert.</param>
            <returns>A generic sequence of all array elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ArrayEquals(System.Array,System.Array)">
            <summary>
            Checks if members form one array are equals to members from a second array.
            </summary>
            <param name="source">First Array to compare.</param>
            <param name="other">Second Array to compare.</param>
            <returns>True if arrays size and content are identical; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">source or other is null.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ArrayEquals``1(System.Array,System.Array,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks if members form one array are equals to members from a second array.
            </summary>
            <typeparam name="T">The type of the elements in the source array.</typeparam>
            <param name="source">First Array to compare.</param>
            <param name="other">Second Array to compare.</param>
            <param name="comparer">An equality comparer used to compare the array elements.</param>
            <returns>True if arrays size and content are identical; false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">source, other or comparer is null.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.GetDimensions(System.Array)">
            <summary>
            Returns an array with the size of each dimension of the supplied array.
            </summary>
            <param name="array">The array to operate on.</param>
            <returns>Array of dimensions.</returns>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>        
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToJagged``1(``0[0:,0:])">
            <summary>
            Converts a two dimensional array into a jagged array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <returns>A jagged array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToJagged``1(``0[0:,0:],System.Boolean)">
            <summary>
            Converts a two dimensional array into a jagged array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <param name="stopOnDefault">Indicates if trailing default value elements should be included.</param>
            <returns>A jagged array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToJagged``1(``0[0:,0:,0:])">
            <summary>
            Converts a three dimensional array into a jagged array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <returns>A jagged array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToJagged``1(``0[0:,0:,0:],System.Boolean)">
            <summary>
            Converts a three dimensional array into a jagged array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <param name="stopOnDefault">Indicates if trailing default value elements should be included.</param>
            <returns>A jagged array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToJagged``1(``0[0:,0:,0:,0:])">
            <summary>
            Converts a four dimensional array into a jagged array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <returns>A jagged array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.ToJagged``1(``0[0:,0:,0:,0:],System.Boolean)">
            <summary>
            Converts a four dimensional array into a jagged array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <param name="stopOnDefault">Indicates if trailing default value elements should be included.</param>
            <returns>A jagged array.</returns>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.FromJagged``1(``0[][])">
            <summary>
            Converts a jagged array into a two dimensional array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>    
            <returns>A two dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.FromJagged``1(``0[][],System.Int32,System.Int32)">
            <summary>
            Converts a jagged array into a two dimensional array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>    
            <param name="y">Max number of elements to convert on the Y axis.</param>
            <param name="x">Max number of elements to convert on the X axis.</param>
            <returns>A two dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.FromJagged``1(``0[][][])">
            <summary>
            Converts a jagged array into a three dimensional array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <returns>A three dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>            
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.FromJagged``1(``0[][][],System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a jagged array into a three dimensional array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>    
            <param name="z">Max number of elements to convert on the Z axis.</param>
            <param name="y">Max number of elements to convert on the Y axis.</param>
            <param name="x">Max number of elements to convert on the X axis.</param>
            <returns>A three dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>            
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.FromJagged``1(``0[][][][])">
            <summary>
            Converts a jagged array into a four dimensional array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <returns>A four dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
        </member>
        <member name="M:LinqLib.Array.ArrayExtensions.FromJagged``1(``0[][][][],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts a jagged array into a four dimensional array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
            <param name="source">The array to convert.</param>
            <param name="a">Max number of elements to convert on the A axis.</param>
            <param name="z">Max number of elements to convert on the Z axis.</param>
            <param name="y">Max number of elements to convert on the Y axis.</param>
            <param name="x">Max number of elements to convert on the X axis.</param>
            <returns>A four dimensional array.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
        </member>
        <member name="T:LinqLib.Sequence.NoiseFilterType">
            <summary>
            Describes the filters available for noise reduction.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.NoiseFilterType.AbsoluteValue">
            <summary>
            Apply filters based on absolute values.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.NoiseFilterType.PercentOfAverage">
            <summary>
            Apply filters based on percent of deviation from the average.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.NoiseFilterType.StandardDeviation">
            <summary>
            Apply filters based on distance from the standard deviation.
            </summary>
        </member>
        <member name="T:LinqLib.Sequence.Transformer">
            <summary>
            Provides methods that return a the pivoted transformation of sequences and their sub sequences.  /// 
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Transformer.Pivot``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.String},System.Boolean)">
            <summary>
            Applies a pivot on a sequence property (sub sequence) in a sequence of objects.
            </summary>
            <typeparam name="TSource">Type of items in the source sequence.</typeparam>
            <typeparam name="TPivot">Type of items in the sequence to pivot.</typeparam>
            <param name="source">Source sequence to operate on.</param>
            <param name="sequenceToPivot">The sub sequence to pivot.</param>
            <param name="nameColumn">The property name in the sub sequence type to use for the pivot column name. The content of that property will become a property in to pivoted output.</param>
            <param name="jaggedSequence">A Boolean indicating if all sub sequence have same number of members with the same type of content.</param>
            <returns>A sequence of objects representing the pivoted values of the original sequence inline with the sub sequence.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Transformer.Pivot``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.String},System.Boolean,System.EventHandler{LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs})">
            <summary>
            Applies a pivot on a sequence property (sub sequence) in a sequence of objects.
            </summary>
            <typeparam name="TSource">Type of items in the source sequence.</typeparam>
            <typeparam name="TPivot">Type of items in the sequence to pivot.</typeparam>
            <param name="source">Source sequence to operate on.</param>
            <param name="sequenceToPivot">The sub sequence to pivot.</param>
            <param name="nameColumn">The property name in the sub sequence type to use for the pivot column name. The content of that property will become a property in to pivoted output.</param>
            <param name="jaggedSequence">A Boolean indicating if all sub sequence have same number of members with the same type of content.</param>
            <param name="classGenerationEventHandler">The name of the event handler that will handle the ClassGenerationEventArgs passed from the class generator.</param>
            <returns>A sequence of objects representing the pivoted values of the original sequence inline with the sub sequence.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Transformer.Pivot``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.String},System.Func{``1,``2},System.Boolean)">
            <summary>
            Applies a pivot on a sequence property (sub sequence) in a sequence of objects.
            </summary>
            <typeparam name="TSource">Type of items in the source sequence.</typeparam>
            <typeparam name="TPivot">Type of items in the sequence to pivot.</typeparam>
            <typeparam name="TResult">Type of result element.</typeparam>
            <param name="source">Source sequence to operate on.</param>
            <param name="sequenceToPivot">The sub sequence to pivot.</param>
            <param name="nameColumn">The property name in the sub sequence type to use for the pivot column name. The content of that property will become a property in to pivoted output.</param>
            <param name="valueColumn">An expression used on members in the sub sequence type to set the pivot column value. The output of this expression will become the value of the pivoted column.</param>
            <param name="jaggedSequence">A Boolean indicating if all sub sequence have same number of members with the same type of content.</param>
            <returns>A sequence of objects representing the pivoted values of the original sequence inline with the sub sequence.</returns>    
        </member>
        <member name="M:LinqLib.Sequence.Transformer.Pivot``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.String},System.Func{``1,``2},System.Boolean,System.EventHandler{LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs})">
            <summary>
            Applies a pivot on a sequence property (sub sequence) in a sequence of objects.
            </summary>
            <typeparam name="TSource">Type of items in the source sequence.</typeparam>
            <typeparam name="TPivot">Type of items in the sequence to pivot.</typeparam>
            <typeparam name="TResult">Type of result element.</typeparam>
            <param name="source">Source sequence to operate on.</param>
            <param name="sequenceToPivot">The sub sequence to pivot.</param>
            <param name="nameColumn">The property name in the sub sequence type to use for the pivot column name. The content of that property will become a property in to pivoted output.</param>
            <param name="valueColumn">An expression used on members in the sub sequence type to set the pivot column value. The output of this expression will become the value of the pivoted column.</param>
            <param name="jaggedSequence">A Boolean indicating if all sub sequence have same number of members with the same type of content.</param>
            <param name="classGenerationEventHandler">The name of the event handler that will handle the ClassGenerationEventArgs passed from the class generator.</param>
            <returns>A sequence of objects representing the pivoted values of the original sequence inline with the sub sequence.</returns>    
        </member>
        <member name="M:LinqLib.Sequence.Transformer.Pivot``3(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.String},System.Func{``1,``2})">
            <summary>
            Applies a pivot on a sequence property in the source object.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TPivot">The type of the pivot.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="sequenceToPivot">The sequence to pivot.</param>
            <param name="nameColumn">The property name in the sub sequence type to use for the pivot column name. The content of that property will become a property in to pivoted output.</param>
            <param name="valueColumn">An expression used on members in the sub sequence type to set the pivot column value. The output of this expression will become the value of the pivoted column.</param>    
            <returns>A pivoted object where rows of a collection become properties.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Transformer.Pivot``3(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``1,System.String},System.Func{``1,``2},System.EventHandler{LinqLib.DynamicCodeGenerator.ClassGenerationEventArgs})">
            <summary>
            Applies a pivot on a sequence property of the source object.
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <typeparam name="TPivot">The type of the pivot.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="source">The source.</param>
            <param name="sequenceToPivot">The sequence to pivot.</param>
            <param name="nameColumn">The property name in the sub sequence type to use for the pivot column name. The content of that property will become a property in to pivoted output.</param>
            <param name="valueColumn">An expression used on members in the sequence type to set the pivot column value. The output of this expression will become the value of the pivoted column.</param>
            <param name="classGenerationEventHandler">The name of the event handler that will handle the ClassGenerationEventArgs passed from the class generator.</param>
            <returns>A pivoted object where rows of a collection become properties.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Transformer.GetSafeRuntimeName(System.String)">
            <summary>
            Creates a CLR safe element name.
            </summary>
            <param name="name">Raw element name.</param>
            <returns>CLR safe element name.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Transformer.GetName(System.String)">
            <summary>
            Returns the original name of the property / field name.
            </summary>
            <param name="safeRuntimeName">Property / field name.</param>
            <returns>The original name of the property / field name.</returns>
            <exception cref="T:System.ArgumentException">
            The Safe Runtime Name cannot be found.
            </exception>
            <remarks>
            When pivoting a sub collection, the new properties of the pivoted type gets their names from the content of elements in the sub collection. The content might not contain valid CLR names.
            THe Pivot function will correct the name to adhere to the .NET requirements.  This method will lookup the original name based on the property / field name. 
            </remarks>
        </member>
        <member name="P:LinqLib.Sequence.Transformer.SafeNamePrefix">
            <summary>
            Prefix to use when converting fields content to CLR names. If field content starts with a digit, the prefix will be added to make the name CLR compatible. default prefix is an underscore.
            </summary>
        </member>
        <member name="T:LinqLib.Sequence.AverageMatchType">
            <summary>
            Describes the type of match used when seeking the average element.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.AverageMatchType.Exact">
            <summary>
            Match an element with the exact value.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.AverageMatchType.Closest">
            <summary>
            Match the element with the closest value.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.AverageMatchType.ExactOrLarger">
            <summary>
            Match the element with the exact or larger value.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.AverageMatchType.ExactOrSmaller">
            <summary>
            Match the element with the exact or smaller value.
            </summary>
        </member>
        <member name="T:LinqLib.Array.FlipAxis">
            <summary>
            Describes the possible axis used to flip a multidimensional array.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.None">
            <summary>
            No Flip Action.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.FlipX">
            <summary>
            Flip on the X Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.FlipY">
            <summary>
            Flip on the Y Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.FlipXY">
            <summary>
            Flip on the X and Y Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.FlipZ">
            <summary>
            Flip on the Z Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.FlipXZ">
            <summary>
            Flip on the X and Z Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.FlipYZ">
            <summary>
            Flip on the Y and Z Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.FlipAxis.FlipXYZ">
            <summary>
            Flip on the X, Y and Z Axis.
            </summary>
        </member>
        <member name="T:LinqLib.Sequence.AlignResult`2">
            <summary>
            Represents the result of am align operation.
            </summary>
            <typeparam name="TLeft">Type of left element in the match result.</typeparam>
            <typeparam name="TRight">Type of right element in the match result.</typeparam>
        </member>
        <member name="T:LinqLib.Sequence.MatchResult`2">
            <summary>
            Represents the result of a match operation.
            </summary>
            <typeparam name="TLeft">Type of left element in the match result.</typeparam>
            <typeparam name="TRight">Type of right element in the match result.</typeparam>
        </member>
        <member name="M:LinqLib.Sequence.MatchResult`2.#ctor(`0,`1)">
            <summary>
            Creates an a new instance of the MatchResult.
            </summary>
            <param name="leftItem">Left item matched.</param>
            <param name="rightItem">Right item matched.</param>
        </member>
        <member name="M:LinqLib.Sequence.MatchResult`2.Equals(System.Object)">
            <summary>
            Determines whether the specified object's state is equal to the current instance's state.
            </summary>
            <param name="obj">The object to be compared with the current instance.</param>
            <returns>True if the specified object is a LinqLib.Operators.Logical.TruthTableItem type and is in a state equal to the current instance's state; otherwise, false.</returns>
        </member>
        <member name="M:LinqLib.Sequence.MatchResult`2.GetHashCode">
            <summary>
            Returns the hash code for this instance's state.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance's state.</returns>
        </member>
        <member name="P:LinqLib.Sequence.MatchResult`2.LeftItem">
            <summary>
            Left item.
            </summary>
        </member>
        <member name="P:LinqLib.Sequence.MatchResult`2.RightItem">
            <summary>
            Right item.
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.AlignResult`2.#ctor(`0,`1,LinqLib.Sequence.AlignType)">
            <summary>
            Creates an a new instance of the AlignResult type with a specific AlignType.
            </summary>
            <param name="leftItem">Left item matched.</param>
            <param name="rightItem">Right item matched.</param>
            <param name="alignType">Match result.</param>
        </member>
        <member name="M:LinqLib.Sequence.AlignResult`2.#ctor(`0,`1)">
            <summary>
            Creates an a new instance of the AlignResult type with a AlignType of type 'Match'.
            </summary>
            <param name="leftItem">Left item matched.</param>
            <param name="rightItem">Right item matched.</param>
        </member>
        <member name="M:LinqLib.Sequence.AlignResult`2.Equals(System.Object)">
            <summary>
            Determines whether the specified object's state is equal to the current instance's state.
            </summary>
            <param name="obj">The object to be compared with the current instance.</param>
            <returns>True if the specified object is a LinqLib.Operators.Logical.TruthTableItem type and is in a state equal to the current instance's state; otherwise, false.</returns>
        </member>
        <member name="M:LinqLib.Sequence.AlignResult`2.GetHashCode">
            <summary>
            Returns the hash code for this instance's state.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance's state.</returns>
        </member>
        <member name="P:LinqLib.Sequence.AlignResult`2.AlignType">
            <summary>
            The type of match relation between the left and right items.
            </summary>
        </member>
        <member name="T:LinqLib.Operators.Logical.Gates">
            <summary>
            Provides logical AND, OR , XOR, NOT and truth table processing methods.
            </summary>
        </member>
        <member name="M:LinqLib.Operators.Logical.Gates.Not(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Applies a Logical 'NOT' over a sequence.
            </summary>
            <param name="input">A System.Collections.Generic.IEnumerable&lt;bool&gt; to apply the 'NOT' operation over.</param>
            <returns>A System.Collections.Generic.IEnumerable&lt;bool&gt; with values that are the 'NOT' representation of the source.</returns>
            <exception cref="T:System.ArgumentNullException">
            source is null.
            </exception>
        </member>
        <member name="M:LinqLib.Operators.Logical.Gates.And(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Applies a Logical 'AND' over two sequences.
            </summary>
            <param name="inputA">First System.Collections.Generic.IEnumerable&lt;bool&gt; to apply the 'AND' operation over.</param>
            <param name="inputB">Second System.Collections.Generic.IEnumerable&lt;bool&gt; to apply the 'AND' operation over.</param>
            <returns>
            A System.Collections.Generic.IEnumerable&lt;bool&gt; with values that are the 'AND' representation of the elements from inputA and inputB.
            If inputA and inputB are not of the same length the returned sequence will have as many elements as the shorter of the two inputs.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            inputA or inputB is null.
            </exception>
        </member>
        <member name="M:LinqLib.Operators.Logical.Gates.Or(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Applies a Logical 'OR' over two sequences.
            </summary>
            <param name="inputA">First System.Collections.Generic.IEnumerable&lt;bool&gt; to apply the 'OR' operation over.</param>
            <param name="inputB">Second System.Collections.Generic.IEnumerable&lt;bool&gt; to apply the 'OR' operation over.</param>
            <returns>
            A System.Collections.Generic.IEnumerable&lt;bool&gt; with values that are the 'OR' representation of the elements from inputA and inputB.
            If inputA and inputB are not of the same length the returned sequence will have as many elements as the shorter of the two inputs.
            </returns>
            <exception cref="T:System.ArgumentNullException">inputA or inputB is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Logical.Gates.Xor(System.Collections.Generic.IEnumerable{System.Boolean},System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Applies a Logical 'XOR' over two sequences.
            </summary>
            <param name="inputA">First System.Collections.Generic.IEnumerable&lt;bool&gt; to apply the 'XOR' operation over.</param>
            <param name="inputB">Second System.Collections.Generic.IEnumerable&lt;bool&gt; to apply the 'XOR' operation over.</param>
            <returns>
            A System.Collections.Generic.IEnumerable&lt;bool&gt; with values that are the 'XOR' representation of the elements from inputA and inputB.
            If inputA and inputB are not of the same length the returned sequence will have as many elements as the shorter of the two inputs.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            inputA or inputB is null.
            </exception>
        </member>
        <member name="M:LinqLib.Helper.InvalidateNullParam(System.Object,System.String)">
            <summary>
            Wraps null validation.
            </summary>
            <param name="parameter">object to validate.</param>
            <param name="parameterName">Name of validated parameter.</param>
        </member>
        <member name="M:LinqLib.Helper.IsNumeric(System.Type)">
            <summary>
            Evaluates if a type is of numeric type or of nullable numeric type. 
            </summary>
            <param name="value">A System.Type to evaluate.</param>
            <returns>true if type is numeric or generic nullable of numeric type, false otherwise.</returns>
        </member>
        <member name="M:LinqLib.Helper.Swap``1(``0@,``0@)">
            <summary>
            Swaps two references.
            </summary>
            <typeparam name="T">The data type of the references to swap.</typeparam>
            <param name="a">First reference</param>
            <param name="b">Second reference</param>
        </member>
        <member name="T:LinqLib.DynamicCodeGenerator.IDynamicPivotObject">
            <summary>
            Used by the Dynamic Class Generator to create dynamic object when pivoting collections of known types.
            </summary>
        </member>
        <member name="M:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.GetPropertyName(System.Int32)">
            <summary>
            Returns the name of a property from its index.
            </summary>
            <param name="index">The index of the property.</param>
            <returns>The name of the property at the provided index location.</returns>
        </member>
        <member name="M:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.GetPropertyIndex(System.String)">
            <summary>
            Returns the index of a property from its name.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The index of the property with the provided name.</returns>
        </member>
        <member name="M:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.GetPropertyType(System.Int32)">
            <summary>
            Returns the type of a property from its index.
            </summary>
            <param name="index">The index of the property.</param>
            <returns>The type of the property at the provided index location.</returns>
        </member>
        <member name="M:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.GetPropertyType(System.String)">
            <summary>
            Returns the type of a property from its name.
            </summary>
            <param name="name">The name of the property.</param>
            <returns>The type of the property with the provided name.</returns>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.Item(System.Int32)">
            <summary>
            Returns the property at the provided index. 
            </summary>
            <param name="index">The index of the property to return.</param>
            <returns>The property at the provided index.</returns>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.Item(System.String)">
            <summary>
            Returns the property with the provided name. 
            </summary>
            <param name="name">The name of the property to return.</param>
            <returns>The property with the provided name.</returns>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.PropertiesCount">
            <summary>
            Returns the number of custom properties.
            </summary>
        </member>
        <member name="P:LinqLib.DynamicCodeGenerator.IDynamicPivotObject.PropertiesNames">
            <summary>
            Returns a sequence of all custom properties names.
            </summary>
        </member>
        <member name="T:LinqLib.Sequence.Subset">
            <summary>
            Provides methods that return a subset of provided sequences.
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeOdd``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Takes all elements that are in odd index position in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <returns>A  sequence of all elements in odd index position.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeEven``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Takes all elements that are in even index position in the sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <returns>A  sequence of all elements in even index position.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakePattern``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Takes all elements that are within the take/skip pattern provided.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="take">The number of elements to take.</param>
            <param name="skip">The number of elements to skip.</param>
            <returns>A  sequence of all elements in matching the take/skip pattern provided.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
            <exception cref="T:System.ArgumentException">take must and skip be larger than 0</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakePattern``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Takes all elements that are within the take/skip pattern provided.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="initialSkip">The number of elements to skip from the start of the sequence.</param>
            <param name="take">The number of elements to take.</param>
            <param name="skip">The number of elements to skip.</param>
            <returns>A  sequence of all elements in matching the take/skip pattern provided.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
            <exception cref="T:System.ArgumentException">take must and skip be larger than 0</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBefore``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a all elements from the start of a sequence up to the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation stops.</param>
            <returns>All elements from the start of a sequence up to the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBefore``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Returns the Specified number of elements prior to the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation stops.</param>
            <param name="count">Number of elements to take.</param>
            <returns>The Specified number of elements prior to the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndBefore``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a all elements from the start of a sequence up to and including the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The last element to take.</param>
            <returns>All elements from the start of a sequence up to and including the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndBefore``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Returns the Specified number of elements prior to and including the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation stops.</param>
            <param name="count">Number of elements to take.</param>
            <returns>The Specified number of elements prior to and including the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBefore``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns all elements from the start of a sequence up to the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation stops.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>All elements from the start of a sequence up to the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBefore``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the Specified number of elements prior to the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation stops.</param>
            <param name="count">Number of elements to take.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>The Specified number of elements prior to the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndBefore``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a all elements from the start of a sequence up to and including the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The last element to take.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>All elements from the start of a sequence up to and including the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndBefore``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the Specified number of elements prior to and including the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation stops.</param>
            <param name="count">Number of elements to take.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>The Specified number of elements prior to and including the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAfter``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns all elements after the specified item to end of sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts after.</param>
            <returns>All elements after the specified item to end of sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAfter``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Returns the Specified number elements after the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts after.</param>
            <param name="count">Number of elements to take.</param>
            <returns>The Specified number elements after the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndAfter``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns all elements after and including the specified item to end of sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts.</param>
            <returns>All elements after and including the specified item to end of sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndAfter``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Returns the Specified number elements after and including the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts.</param>
            <param name="count">Number of elements to take.</param>
            <returns>The Specified number elements after and including the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAfter``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns all elements after the specified item to end of sequence using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts after.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>All elements after the specified item to end of sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAfter``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the Specified number elements after the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts after.</param>
            <param name="count">Number of elements to take.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>The Specified number elements after the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndAfter``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns all elements after and including the specified item to end of sequence using a custom comparer. 
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>All elements after and including the specified item to end of sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeSelfAndAfter``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the Specified number elements after and including the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation starts.</param>
            <param name="count">Number of elements to take.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>The Specified number elements after and including the specified item.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAround``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Takes the specified number of items before and after the the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation occurs.</param>
            <param name="count">number of items to take (total items will be up to count*2 + 1).</param>
            <returns>The specified number of items before and after the the specified item.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAround``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Int32)">
            <summary>
            Takes the specified number of items before and after the the specified item.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation occurs.</param>
            <param name="before">number of items to take before the instance of item.</param>
            <param name="after">number of items to take after the instance of item.</param>
            <returns>The specified number of items before and after the the specified item.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAround``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Takes the specified number of items before and after the the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation occurs.</param>
            <param name="count">number of items to take (total items will be up to count*2 + 1).</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>The specified number of items before and after the the specified item.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeAround``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Takes the specified number of items before and after the the specified item using a custom comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="item">The element where operation occurs.</param>
            <param name="before">number of items to take before the instance of item.</param>
            <param name="after">number of items to take after the instance of item.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>The specified number of items before and after the the specified item.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeTop``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of elements from the start of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified number of elements from the top of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeTop``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns a specified number of elements from the start of a sequence based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified number of elements from the top of the input sequence based on a predicate.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeTopPercent``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Returns a specified percent of elements from the start of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="percent">The percent of elements to return. user 1.00 to indicate 100%.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified percent of elements from the top of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeTopPercent``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,System.Boolean})">
            <summary>
            Returns a specified percent of elements from the start of a sequence based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="percent">The percent of elements to return. user 1.00 to indicate 100%.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified percent of elements from the top of the input sequence based on a predicate.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBottom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of elements from the end of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified number of elements from the bottom of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBottom``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Returns a specified number of elements from the end of a sequence based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="count">The number of elements to return.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified number of elements from the bottom of the input sequence based on a predicate.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBottomPercent``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Returns a specified percent of elements from the end of a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="percent">The percent of elements to return. user 1.00 to indicate 100%.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified percent of elements from the bottom of the input sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="M:LinqLib.Sequence.Subset.TakeBottomPercent``1(System.Collections.Generic.IEnumerable{``0},System.Double,System.Func{``0,System.Boolean})">
            <summary>
            Returns a specified percent of elements from the end of a sequence based on a predicate.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The sequence to return elements from.</param>
            <param name="percent">The percent of elements to return. user 1.00 to indicate 100%.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>An System.Collections.Generic.IEnumerable&lt;T&gt; that contains the specified percent of elements from the bottom of the input sequence based on a predicate.</returns>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
        </member>
        <member name="T:LinqLib.Operators.Action">
            <summary>
            Extension methods applying actions on sequences.
            </summary>
        </member>
        <member name="M:LinqLib.Operators.Action.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the IEnumerable&lt;TSource&gt;.
            </summary>
            <remarks>
            This extension does not defers the execution all elements are processed once the method is called.
            If &lt;TSource&gt; is a value type, changes to the source elements will not be reflected in the return value of this function.
            It is best NOT to use this method to modify the content of the enumerated items, use the Select extension instead to project the modified value. 
            ForEach is a good choice if you need to perform an action and use each element of the sequence as a parameter for your action.  
            </remarks>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The elements to perform the action on.</param>
            <param name="action">The System.Action&lt;T&gt; delegate to perform on each element of the IEnumerable&lt;TSource&gt;.</param>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
            <exception cref="T:System.ArgumentNullException">action is null</exception>
            <returns>The source sequence with any side effects from the action function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Action.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Performs the specified action on each element of the IEnumerable&lt;TSource&gt;.
            </summary>
            <remarks>
            This extension does not defers the execution all elements are processed once the method is called.
            If &lt;TSource&gt; is a value type, changes to the source elements will not be reflected in the return value of this function.
            It is best NOT to use this method to modify the content of the enumerated items, use the Select extension instead to project the modified value. 
            ForEach is a good choice if you need to perform an action and use each element of the sequence as a parameter for your action.  
            </remarks>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">The elements to perform the action on.</param>
            <param name="action">The System.Action&lt;T&gt; delegate to perform on each element of the IEnumerable&lt;TSource&gt;; the second parameter of the function represents the index of the source element.</param>
            <exception cref="T:System.ArgumentNullException">source is null</exception>
            <exception cref="T:System.ArgumentNullException">action is null</exception>
            <returns>The source sequence with any side effects from the action function.</returns>
        </member>
        <member name="T:LinqLib.Array.SingleComparer">
            <summary>
            A class that provides a way to compare float types while ignoring minor floating point arithmetic errors
            </summary>
        </member>
        <member name="M:LinqLib.Array.SingleComparer.#ctor">
            <summary>
            Initializes a new instance of SingleComparer class with default sensitivity value of 0.00001.
            </summary>
        </member>
        <member name="M:LinqLib.Array.SingleComparer.#ctor(System.Single)">
            <summary>
            Initializes a new instance of SingleComparer class.
            </summary>
            <param name="sensitivity">A value representing the sensitivity of the comparisons performed by this class.</param>
        </member>
        <member name="M:LinqLib.Array.SingleComparer.Equals(System.Single,System.Single)">
            <summary>
            Determines whether the specified values are equal or within the sensitivity range.
            </summary>
            <param name="x">The first float to compare.</param>
            <param name="y">The second float to compare.</param>
            <returns>true if the specified objects are equal or within the sensitivity range; otherwise, false.</returns>
        </member>
        <member name="M:LinqLib.Array.SingleComparer.GetHashCode(System.Single)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The System.Object for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:LinqLib.Sequence.SpecializedSets">
            <summary>
            Methods generating special sequence types.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.SpecializedSets.powersOfTen">
            <summary>
            a private static lookup table with 10 to power of 0 to 18.
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Factorials">
            <summary>
            Generates a sequence of factorials.
            </summary>
            <returns>A sequence of factorials.</returns>
            <remarks>Sequence will return 19 elements only to avoid overflow with the long type.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Fibs">
            <summary>
            Generates a sequence of Fibonacci numbers.
            </summary>
            <returns>A sequence of Fibonacci numbers.</returns>
            <remarks>Sequence will return 90 elements only to avoid overflow with the long type.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Primes">
            <summary>
            Generates a sequence of prime numbers.
            </summary>
            <returns>A sequence of prime numbers.</returns>
            <remarks>Sequence will end at 9223372036854775783, the prime a long can hold.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Primes(System.Int64)">
            <summary>
            Generates a sequence of prime numbers.
            </summary>
            <param name="max">The largest value to return. If Max is not a prime, the operation will stop at the nearest prime.</param>
            <returns>A sequence of prime numbers.</returns>
            <remarks>Sequence will end at 9223372036854775783, the prime a long can hold.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Primes(System.Int64,System.Int64)">
            <summary>
            Generates a sequence of prime numbers.
            </summary>
            <param name="min">The starting prime value to return. If Min is not a prime, the operation will start at the nearest prime that is larger than Min.</param>
            <param name="max">The largest value to return. If Max is not a prime, the operation will stop at the nearest prime that is smaller than Min.</param>
            <returns>A sequence of prime numbers.</returns>
            <remarks>Sequence will end at 9223372036854775783, the prime a long can hold.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Phi(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Creates a sequence of Phi values base on values in the source. 
            </summary>
            <param name="source">The sequence elements to calculate phi from.</param>
            <returns>A sequence of Phi values.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.PrimeDivisors(System.Int64)">
            <summary>
            Generates a sequence of all prime divisors for the provided value.
            </summary>
            <param name="value">The value to get the prime divisors for.</param>
            <returns>A sequence of all prime divisors.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.PrimeFactors(System.Int64)">
            <summary>
            Generates a sequence of all prime factors for the provided value.
            </summary>
            <param name="value">The value to get the prime factors for.</param>
            <returns>A sequence of all prime factors.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Divisors(System.Int64)">
            <summary>
            Generates a sequence of all divisors for the provided value.
            </summary>
            <param name="value">The value to get the divisors for.</param>
            <returns>A sequence of all divisors.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.ProperDivisors(System.Int64)">
            <summary>
            Generates a sequence of all proper divisors for the provided value.
            </summary>
            <param name="value">The value to get the proper divisors for.</param>
            <returns>A sequence of all proper divisors.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.IsPrime(System.Int64)">
            <summary>
            Checks if a value is a prime number.
            </summary>
            <param name="value">The value to check for the prime property.</param>
            <returns>true id the value is a prime, false otherwise</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.Phi(System.Int64)">
            <summary>
            Calculates the Phi of a value. 
            </summary>
            <param name="value">The value to calculate Phi for.</param>
            <returns>The Phi of a value.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.SumOfDigits(System.Int32)">
            <summary>
            Calculates the sum of digits of the provided value.
            </summary>
            <param name="value">A System.Int32 to operate on.</param>
            <returns>The sum of digits of the provided value.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.SumOfDigits(System.Int64)">
            <summary>
            Calculates the sum of digits of the provided value.
            </summary>
            <param name="value">A System.Int64 to operate on.</param>
            <returns>The sum of digits of the provided value.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.SumOfDigits(System.String)">
            <summary>
            Calculates the sum of digits of the provided value.
            </summary>
            <param name="value">A System.String representing a number to operate on.</param>
            <returns>The sum of digits of the provided value.</returns>
            <remarks>Values with non digit [0-9] characters will return unreliable results.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.ToNumber(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Converts a sequence of digits into a number.
            </summary>
            <param name="digits">The sequence of digits to convert.</param>
            <returns>A System.Int64 that is the number represented by the digits sequence.</returns>
        </member>
        <member name="M:LinqLib.Sequence.SpecializedSets.ToDigits``1(``0)">
            <summary>
            Converts a number into a sequence of digits.
            </summary>
            <typeparam name="T">The Type of the provided number.</typeparam>
            <param name="number">The number to convert into digit sequence.</param>
            <returns>A sequence if digits.</returns>
            <remarks>If T is not a numeric type, the returned sequence will contain unreliable results.</remarks>
        </member>
        <member name="T:LinqLib.Sequence.SequenceRelationType">
            <summary>
            Describes the relations between two sequences.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.SequenceRelationType.None">
            <summary>
            Nothing in common.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.SequenceRelationType.Equal">
            <summary>
            All members are the same in and the correct order.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.SequenceRelationType.Similar">
            <summary>
            All members are the same but out of order.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.SequenceRelationType.Contains">
            <summary>
            Input contains Other.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.SequenceRelationType.Contained">
            <summary>
            Other contains Input.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.SequenceRelationType.Intersects">
            <summary>
            Some elements are in common.
            </summary>
        </member>
        <member name="T:LinqLib.Operators.Statistical">
            <summary>
            Provides extension methods for calculating Frequency, probability, Average, variance and standard deviation on sequences
            </summary>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Frequency``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Calculates the frequency of each element in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of the evaluated sequences.</typeparam>
            <param name="source">Source sequence.</param>
            <returns>A sequence of Key-Value pairs with an entry for each element in original sequence and its frequency.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Frequency``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``1})">
            <summary>
            Calculates the frequency of each element in a sequence based on a custom list of buckets.
            </summary>
            <typeparam name="TSource">The type of the elements of the evaluated sequences.</typeparam>
            <typeparam name="TBucket">The type of the bucket elements.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="buckets">A list of buckets to which each element in the source sequence may fit.</param>
            <param name="bucketSelector">A function that take a source element and the list of buckets and returns the bucket where the source element fits.</param>
            <returns>A sequence of Key-Value pairs with an entry for each bucket element and its frequency.</returns>
            <exception cref="T:System.ArgumentNullException">source or buckets or bucketSelector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Frequency``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Calculates the frequency of each element based on a custom transformation.
            </summary>
            <typeparam name="TSource">The type of the elements of the evaluated sequences.</typeparam>
            <typeparam name="TBucket">The type of the bucket elements.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="bucketSelector">A function that take a source element and returns the bucket where the source element fits.</param>
            <returns>A sequence of Key-Value pairs with an entry for each bucket element and its frequency.</returns>
            <exception cref="T:System.ArgumentNullException">source or bucketSelector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Probability``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Calculates the probability of randomly matching an item in a sequence. 
            </summary>
            <typeparam name="TSource">The type of the elements of the evaluated sequences.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to match.</param>
            <returns>A double-precision floating-point value between 0 and 1.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Probability``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Calculates the probability of randomly matching an item in a sequence using a custom comparer. 
            </summary>
            <typeparam name="TSource">The type of the elements of the evaluated sequences.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to match.</param>
            <param name="comparer">An IEqualityComparer instance to use when matching elements.</param>
            <returns>A double-precision floating-point value between 0 and 1.</returns>    
            <exception cref="T:System.ArgumentNullException">source or comparer is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Computes the moving sum of a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the moving sum on.</param>
            <param name="blockSize">The number of elements in the moving sum block. Block size must be two or larger.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Singel values.
            </summary>
            <param name="source">A sequence of System.Singel values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of System.Singel values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Singel&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Singel&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Singel&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Double values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Single values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Single values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Single&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Decimal values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Int64 values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
            <summary>
            Computes the moving variance in a sequence of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Int32 values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.MovingSum``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the moving variance in a sequence of a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving variance in a sequence on.</param>
            <param name="blockSize">The number of elements in the moving variance in a sequence block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Computes the moving average of a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Computes the moving average of a sequence of System.Singel values.
            </summary>
            <param name="source">A sequence of System.Singel values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of System.Singel values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Singel&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Singel&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Singel&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
            <summary>
            Computes the moving average of a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <summary>
            Computes the moving average of a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Computes the moving average of a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
            <summary>
            Computes the moving average of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Double values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
            <summary>
            Computes the moving average of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Single values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Single values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Single&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
            <summary>
            Computes the moving average of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Decimal values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
            <summary>
            Computes the moving average of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Int64 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
            <summary>
            Computes the moving average of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Int32 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.StandardMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the moving average of a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the moving average on.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving average on.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Singel values.
            </summary>
            <param name="source">A sequence of System.Singel values to calculate the moving average on.</param>
            <returns>A sequence of System.Singel values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Singel&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Singel&gt; values to calculate the moving average on.</param>
            <returns>A sequence of Nullable&lt;System.Singel&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the moving average on.</param>    
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving average on.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the moving average on.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving average on.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the moving average on.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving average on.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Double values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Single values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Single values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Single&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Decimal values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Int64 values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the cumulative moving average of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of System.Int32 values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the cumulative moving average of a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving average on.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Computes the weighted moving average of a sequence of System.Double values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Double values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>    
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Double&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Single},System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Computes the weighted moving average of a sequence of System.Single values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Single values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of System.Single values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32,System.Func{System.Int32,System.Single})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Single&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of Nullable&lt;System.Single&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32,System.Func{System.Int32,System.Decimal})">
            <summary>
            Computes the weighted moving average of a sequence of System.Decimal values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32,System.Func{System.Int32,System.Decimal})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Decimal&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Computes the weighted moving average of a sequence of System.Int64 values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Int64&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Computes the weighted moving average of a sequence of System.Int32 values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32,System.Func{System.Int32,System.Double})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Int32&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of System.Double values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Double values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Double&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of System.Single values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Single values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of System.Single values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Single&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of Nullable&lt;System.Single&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of System.Decimal values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Decimal&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of System.Int64 values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Int64&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of System.Int32 values using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Int32&gt; values using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>    
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
            <remarks>Elements position within the block is used as weight. In a block of for items, the first (oldest) element will have the 1/4 of the weight of the last element.</remarks>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Double})">
            <summary> 
            Computes the weighted moving average of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Double values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>    
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Single},System.Func{``0,System.Single})">
            <summary> 
            Computes the weighted moving average of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Single values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Single values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Single},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Single&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>    
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Decimal},System.Func{``0,System.Decimal})">
            <summary> 
            Computes the weighted moving average of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Decimal values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Decimal},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Decimal&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>    
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Int64})">
            <summary> 
            Computes the weighted moving average of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>    
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Int32})">
            <summary> 
            Computes the weighted moving average of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items. 
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of System.Double values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.WeightedMovingAverage``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,System.Double},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the weighted moving average of a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence using lower weight for 'older' items.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the moving average on.</param>
            <param name="blockSize">The number of elements in the moving average block. Block size must be two or larger.</param>
            <param name="weight">A function that compute the weight of an element based on its index in the block.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of Nullable&lt;System.Double&gt; values.</returns>
            <exception cref="T:System.ArgumentNullException">source or weight or selector is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>    
            <exception cref="T:System.ArgumentException">source must be larger than block size.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the variance in a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the variance in a sequence of System.Single values.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Single&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the variance in a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the variance in a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the variance in a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the variance in a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the variance in a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the variance in a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the variance in a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the variance in a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the variance in a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the variance of.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the cumulative variance in a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the cumulative variance in a sequence of System.Single values.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Single&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the cumulative variance in a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the cumulative variance in a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the cumulative variance in a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the cumulative variance in a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the cumulative variance in a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the cumulative variance in a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the cumulative variance in a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the cumulative variance in a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the variance of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeVariance``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the cumulative variance in a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the variance of.</param>
            <returns>A sequence of values that are the computed variance for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Single values.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Single&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
            <summary>
            Computes the variance of blocks of elements in a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The variance in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Variance``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the variance of blocks of elements in a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the variance of.</param>
            <param name="blockSize">The number of elements in the variance block. Block size must be two or larger.</param>
            <returns>The variance in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the standard deviation of a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the standard deviation of a sequence of System.Single values.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Single&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the standard deviation of a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the standard deviation of a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the standard deviation of a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the standard deviation of a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the standard deviation of a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the standard deviation of a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the standard deviation of a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the standard deviation of a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception> 
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the standard deviation of a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the standard deviation of.</param>
            <returns>The standard deviation of the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Single values.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Single&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the cumulative standard deviation in a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the standard deviation of.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.CumulativeStdev``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the cumulative standard deviation in a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the standard deviation of.</param>
            <returns>A sequence of values that are the computed standard deviation for the first 2,3,4,5....N elements.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Double values.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Double&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Single values.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Single&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Decimal values.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Decimal&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Int64},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Int64 values.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Int64&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Int32 values.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.Int32)">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Int32&gt; values.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentException">blockSize must be two or larger.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Double})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Double values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Double values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Double&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Double&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Single})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Single values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Single values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Single&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Single&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Decimal})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Decimal values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Decimal values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Decimal&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Decimal&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>  
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int64})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Int64 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int64 values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Int64&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int64&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of System.Int32 values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of System.Int32 values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <param name="selector">A transform function to apply to each element.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="M:LinqLib.Operators.Statistical.Stdev``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the standard deviation of blocks of elements in a sequence of Nullable&lt;System.Int32&gt; values that are obtained by invoking a transform function on each element of the input sequence.
            </summary>
            <param name="source">A sequence of Nullable&lt;System.Int32&gt; values to calculate the standard deviation of.</param>
            <param name="blockSize">The number of elements in the standard deviation block. Block size must be two or larger.</param>
            <returns>The standard deviation in the sequence of values.</returns>
            <param name="selector">A transform function to apply to each element.</param>
            <exception cref="T:System.ArgumentNullException">source or selector is null.</exception>
            <exception cref="T:System.ArgumentException">Sequence must have at least two values.</exception>
        </member>
        <member name="T:LinqLib.Sequence.Analysis">
            <summary>
            Provides sequence relations analysis and pattern detection methods.
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.SequenceRelation``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Evaluated the relations between two sequences.
            </summary>
            <typeparam name="TSource">The type of the elements of the evaluated sequences.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="other">The sequence to use when evaluating the relation with the source.</param>
            <returns>A SequenceRelationType indicating the type of the relation between the sequences.</returns>
            <exception cref="T:System.ArgumentNullException">source or other is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.SequenceRelation``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Evaluated the relations between two sequences using a user supplied comparer.
            </summary>
            <typeparam name="TSource">The type of the elements of the evaluated sequences.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="other">The sequence to use when evaluating the relation with the source.</param>
            <param name="comparer">The IEqualityComparer&lt;TSource&gt; to use when comparing elements.</param>
            <returns>A SequenceRelationType indicating the type of the relation between the sequences.</returns>
            <exception cref="T:System.ArgumentNullException">source or other is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Compares two sequences creating a new sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of the compared sequences. TSource must implement IComparable.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="other">The sequence to compare with the source.</param>
            <returns>A sequence of the result returned by comparing items from the source and other sequences.</returns>
            <exception cref="T:System.ArgumentNullException">source or other is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.CompareTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Compares two sequences creating a new sequence of results using a user supplied comparer. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of the compared sequences.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="other">The sequence to compare with the source.</param>
            <param name="comparer">The IEqualityComparer&lt;TSource&gt; to use when comparing elements.</param>
            <returns>A sequence of the result returned by comparing items from the source and other sequences.</returns>
            <exception cref="T:System.ArgumentNullException">source or other is null.</exception>
            <exception cref="T:System.ArgumentNullException">comparer is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.Match``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            matches two sequences positioning matching elements together while omitting mismatches.
            </summary>
            <typeparam name="T">Type of elements in the left and right sequences.</typeparam>    
            <param name="leftSequence">A System.IEnumerable&lt;T&gt; of elements to match to.</param>
            <param name="rightSequence">A System.IEnumerable&lt;T&gt; of elements to match with.</param>
            <returns>A sequence of MatchResult elements matching left and right elements while omitting elements when the left or right element is missing.</returns>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.Match``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            matches two sequences positioning matching elements together while omitting mismatches.
            </summary>
            <typeparam name="TLeft">Type of elements in the left sequence.</typeparam>    
            <typeparam name="TRight">Type of elements in the right sequence.</typeparam>
            <param name="leftSequence">A System.IEnumerable&lt;TLeft&gt; of elements to match to.</param>
            <param name="rightSequence">A System.IEnumerable&lt;TRight&gt; of elements to match with.</param>
            <param name="comparer">A custom comparer function that matches the left and right items.</param>
            <returns>A sequence of MatchResult elements matching left and right elements while omitting elements when the left or right element is missing.</returns>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.Align``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Aligns two sequences positioning matching elements together and indicating mismatches.
            </summary>
            <typeparam name="T">Type of elements in the left and right sequences.</typeparam>    
            <param name="leftSequence">A System.IEnumerable&lt;T&gt; of elements to align to.</param>
            <param name="rightSequence">A System.IEnumerable&lt;T&gt; of elements to align with.</param>
            <returns>A sequence of AlignResult elements matching left and right elements or returning a single element indicating whether the left or right element is missing.</returns>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.Align``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Aligns two sequences positioning matching elements together and indicating mismatches.
            </summary>
            <typeparam name="T">Type of elements in the left and right sequences.</typeparam>    
            <param name="leftSequence">A System.IEnumerable&lt;T&gt; of elements to align to.</param>
            <param name="rightSequence">A System.IEnumerable&lt;T&gt; of elements to align with.</param>
            <param name="replacer">A default value to place when the right or left elements are missing.</param>
            <returns>A sequence of AlignResult elements matching left and right elements or returning a single element indicating whether the left or right element is missing.</returns>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.Align``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},``0)">
            <summary>
            Aligns two sequences positioning matching elements together and indicating mismatches.
            </summary>
            <typeparam name="T">Type of elements in the left and right sequences.</typeparam>    
            <param name="leftSequence">A System.IEnumerable&lt;T&gt; of elements to align to.</param>
            <param name="rightSequence">A System.IEnumerable&lt;T&gt; of elements to align with.</param>
            <param name="comparer">A custom comparer function that matches the left and right items.</param>
            <param name="replacer">A default value to place when the right or left elements are missing.</param>
            <returns>A sequence of AlignResult elements matching left and right elements or returning a single element indicating whether the left or right element is missing.</returns>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.Align``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <summary>
            Aligns two sequences positioning matching elements together and indicating mismatches.
            </summary>
            <typeparam name="TLeft">Type of elements in the left sequence.</typeparam>    
            <typeparam name="TRight">Type of elements in the right sequence.</typeparam>
            <param name="leftSequence">A System.IEnumerable&lt;TLeft&gt; of elements to align to.</param>
            <param name="rightSequence">A System.IEnumerable&lt;TRight&gt; of elements to align with.</param>
            <param name="comparer">A custom comparer function that matches the left and right items.</param>
            <returns>A sequence of AlignResult elements matching left and right elements or returning a single element indicating whether the left or right element is missing.</returns>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.Align``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean},``0,``1)">
            <summary>
            Aligns two sequences positioning matching elements together and indicating mismatches.
            </summary>
            <typeparam name="TLeft">Type of elements in the left sequence.</typeparam>    
            <typeparam name="TRight">Type of elements in the right sequence.</typeparam>
            <param name="leftSequence">A System.IEnumerable&lt;TLeft&gt; of elements to align to.</param>
            <param name="rightSequence">A System.IEnumerable&lt;TRight&gt; of elements to align with.</param>
            <param name="comparer">A custom comparer function that matches the left and right items.</param>
            <param name="leftReplacer">A default value to place when the left element is missing.</param>
            <param name="rightReplacer">A default value to place when the right element is missing.</param>
            <returns>A sequence of AlignResult elements matching left and right elements or returning a single element indicating whether the left or right element is missing.</returns>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.GetPattern``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Attempts to discover a repetitive pattern of elements in the supplied sequence.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">A System.IEnumerable&lt;T&gt; of elements to scan for pattern.</param>
            <returns>A System.IEnumerable&lt;T&gt; with the found pattern, null if pattern was not found.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <remarks>A sequence of 1,2,3,1,2,3,1,2,3,1 will return 1,2,3. the returned pattern fits three time in source and the last element matched the start of the discovered pattern.</remarks>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.GetPattern``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attempts to discover a repetitive pattern of elements in the supplied sequence.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">A System.IEnumerable&lt;T&gt; of elements to scan for pattern.</param>
            <param name="minSize">The minimal length of the pattern.</param>
            <param name="maxSize">The maximal length of the pattern.</param>
            <param name="exactFit">A Boolean indicating if the discovered pattern must fit exactly into the source.</param>
            <returns>A System.IEnumerable&lt;T&gt; with the found pattern, null if pattern was not found.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.GetPattern``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Int32,System.Int32,System.Boolean)">
            <summary>
            Attempts to discover a repetitive pattern of elements in the supplied sequence using a user supplied comparer.
            </summary>
            <typeparam name="T">The type of the elements in the source sequence.</typeparam>
            <param name="source">A System.IEnumerable&lt;T&gt; of elements to scan for pattern.</param>
            <param name="comparer">The IEqualityComparer&lt;TSource&gt; to use when processing elements.</param>
            <param name="minSize">The minimal length of the pattern.</param>
            <param name="maxSize">The maximal length of the pattern.</param>
            <param name="exactFit">A Boolean indicating if the discovered pattern must fit exactly into the source.</param>
            <returns>A System.IEnumerable&lt;T&gt; with the found pattern, null if pattern was not found.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Reports the index of the first occurrence of the specified item in the source sequence.
            </summary>
            <typeparam name="T">Type of elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to seek.</param>
            <returns>The zero-based index position of item if that element is found, or -1 if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified item in the source sequence.
            </summary>
            <typeparam name="T">Type of elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of item if that element is found, or -1 if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Reports the index of the first occurrence of the specified item in the source sequence.
            </summary>
            <typeparam name="T">Type of elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to seek.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>The zero-based index position of item if that element is found, or -1 if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentNullException">comparer is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified item in the source sequence.
            </summary>
            <typeparam name="T">Type of elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to seek.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of item if that element is found, or -1 if it is not.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentNullException">comparer is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IndexesOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns a sequence of indexes of occurrences of the specified item in the source sequence.
            </summary>
            <typeparam name="T">Type of elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to seek.</param>
            <returns>A sequence of indexes of occurrences of the specified item in the source sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IndexesOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns a sequence of indexes of occurrences of the specified item in the source sequence.
            </summary>
            <typeparam name="T">Type of elements in the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="item">The item to seek.</param>
            <param name="comparer">A IEqualityComparer comparer to use when evaluating items</param>
            <returns>A sequence of indexes of occurrences of the specified item in the source sequence</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentNullException">comparer is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IsSameOrSimilar``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Used internally by SequenceRelation method
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IsContainsOrIntersectesOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Used internally by SequenceRelation method
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Analysis.IsContainedOrIntersectesOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Used internally by SequenceRelation method
            </summary>
        </member>
        <member name="T:LinqLib.Operators.Arithmetic">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for applying arithmetic operations on objects that implement System.Collections.Generic.IEnumerable&lt;T&gt;. 
            </summary>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Add``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds elements of two sequences. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="T">The type of the elements of leftSequence and rightSequence.</typeparam>
            <param name="leftSequence">The first sequence of values to use in the add operation.</param>
            <param name="rightSequence">The second sequence of values to use in the add operation.</param>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null</exception>
            <exception cref="T:System.InvalidOperationException">T is not a numeric type.</exception>
            <returns>A sequence of values that are the result of adding of the values from the left and right sequences.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Subtract``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Subtracts elements of two sequences. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="T">The type of the elements of leftSequence and rightSequence.</typeparam>
            <param name="leftSequence">The first sequence of values to use in the subtract operation.</param>
            <param name="rightSequence">The second sequence of values to use in the subtract operation.</param>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null</exception>
            <exception cref="T:System.InvalidOperationException">T is not a numeric type.</exception>
            <returns>A sequence of values that are the result of subtracting of the values of the right sequence from the left sequence.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Multiply``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Multiplies elements of two sequences. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="T">The type of the elements of leftSequence and rightSequence.</typeparam>
            <param name="leftSequence">The first sequence of values to use in the multiply operation.</param>
            <param name="rightSequence">The second sequence of values to use in the multiply operation.</param>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null</exception>
            <exception cref="T:System.InvalidOperationException">T is not a numeric type.</exception>
            <returns>A sequence of values that are the result of multiplying of the values from the left sequence with the right sequence.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Divide``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Divides elements of two sequences. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="T">The type of the elements of leftSequence and rightSequence.</typeparam>
            <param name="leftSequence">The first sequence of values to use in the divide operation.</param>
            <param name="rightSequence">The second sequence of values to use in the divide operation.</param>
            <exception cref="T:System.ArgumentNullException">leftSequence or rightSequence is null</exception>
            <exception cref="T:System.InvalidOperationException">T is not a numeric type.</exception>
            <returns>A sequence of values that are the result of dividing of the values from the right sequence with the left sequence.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from two sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from three sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from four sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from five sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from six sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from seven sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from eight sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from nine sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from 10 sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from 11 sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from 12 sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from 13 sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from 14 sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from 15 sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.ApplyFunction``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``0,``1})">
            <summary>
            Applies a user supplied function to elements from 16 sequences and returns a sequence of results. If sequences are not equal in length, the returned sequence will be as long as the shorter sequence.
            </summary>
            <typeparam name="TSource">Type of elements in the source sequences.</typeparam>
            <typeparam name="TResult">Type of elements in the results sequence.</typeparam>
            <param name="sources">A set of sequences to with elements to use as inputs for the supplied function.</param>
            <param name="func">The function to use to on the source elements.</param>
            <returns>A sequence of results returned by the custom function.</returns>
        </member>
        <member name="T:LinqLib.Operators.Arithmetic.Helper`1">
            <summary>
            Static class that exposes complied expressions representing the four arithmetic operations.
            </summary>
            <typeparam name="T">The type of the elements to operate on.</typeparam>
        </member>
        <member name="F:LinqLib.Operators.Arithmetic.Helper`1.Add">
            <summary>
            Add operation function.
            </summary>
        </member>
        <member name="F:LinqLib.Operators.Arithmetic.Helper`1.Subtract">
            <summary>
            Subtract operation function.
            </summary>
        </member>
        <member name="F:LinqLib.Operators.Arithmetic.Helper`1.Multiply">
            <summary>
            Multiply operation function. 
            </summary>
        </member>
        <member name="F:LinqLib.Operators.Arithmetic.Helper`1.Divide">
            <summary>
            Divide operation function.
            </summary>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Helper`1.InitAdd">
            <summary>
            Add operation function initializer.
            </summary>
            <returns>Add operation function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Helper`1.InitSubtract">
            <summary>
            Subtract operation function initializer.
            </summary>
            <returns>Subtract operation function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Helper`1.InitMultiply">
            <summary>
            Multiply operation function initializer.
            </summary>
            <returns>Multiply operation function.</returns>
        </member>
        <member name="M:LinqLib.Operators.Arithmetic.Helper`1.InitDivide">
            <summary>
            Divide operation function initializer.
            </summary>
            <returns>Divide operation function.</returns>
        </member>
        <member name="T:LinqLib.Array.RotateAxis">
            <summary>
            Describes the possible axis used to rotate a multidimensional array.
            </summary>
        </member>
        <member name="F:LinqLib.Array.RotateAxis.RotateNone">
            <summary>
            No Rotation
            </summary>
        </member>
        <member name="F:LinqLib.Array.RotateAxis.RotateX">
            <summary>
            Rotate on the X Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.RotateAxis.RotateY">
            <summary>
            Rotate on the Y Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.RotateAxis.RotateZ">
            <summary>
            Rotate on the Z Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.RotateAxis.RotateA">
            <summary>
            Rotate on the A (also known as X') Axis.
            </summary>
        </member>
        <member name="F:LinqLib.Array.RotateAxis.RotateB">
            <summary>
            Rotate on the B (also known as Y') Axis. Currently not in use. 
            </summary>
        </member>
        <member name="F:LinqLib.Array.RotateAxis.RotateC">
            <summary>
            Rotate on the C (also known as Z') Axis. Currently not in use.
            </summary>
        </member>
        <member name="T:LinqLib.Sequence.Enumerator">
            <summary>
            Generates new sequences.
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Randomly rearrange elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <returns>A random sequence of all elements in the source sequence. </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Shuffle``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Randomly rearrange elements in a sequence.
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="seed">A seed number to provide to the randomizer.</param>
            <returns>A random sequence of all elements in the source sequence. </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.RotateLeft``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Rotates N elements in the source to the left.
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="items">the number of elements to rotate.</param>
            <returns>The rotated version of the source sequence. </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <remarks>Calling this method to rotate 2 elements in the a,b,c,d,e, sequence will return c,d,e,a,b.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.RotateRight``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Rotates N elements in the source to the right.
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="items">the number of elements to rotate.</param>
            <returns>The rotated version of the source sequence. </returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <remarks>Calling this method to rotate 2 elements in the a,b,c,d,e, sequence will return d,e,a,b,c.</remarks>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Cycle``1(System.Collections.Generic.IEnumerable{``0})">
             <summary>
             Cycles through the source sequence. 
             </summary>
             <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
             <param name="source">Source sequence.</param>
             <returns>Endless list of items repeating the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Cycle``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Cycles through the source sequence. 
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="cycles">The number of times to cycle through the source sequence.</param>
            <returns>A list of items repeating the source sequence as indicated by the cycles parameter.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate``1(System.Int32,System.Func{``0})">
            <summary>
            Generates a sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements of to generate.</typeparam>
            <param name="count">The number of elements to generate.</param>
            <param name="generator">A generator function that take no parameters and return a value/instance of type T.</param>
            <returns>A sequence of elements of the type of T.</returns>
            <exception cref="T:System.ArgumentNullException">generator is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Generates a sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements of to generate.</typeparam>
            <param name="count">The number of elements to generate.</param>
            <param name="generator">A generator function that take the index of item being generated as a parameter and return a value/instance of type T.</param>
            <returns>A sequence of elements of the type of T.</returns>
            <exception cref="T:System.ArgumentNullException">generator is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate``1(System.Int32,System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Generates a sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements of to generate.</typeparam>
            <param name="start">The stating index offset.</param>
            <param name="count">The number of elements to generate.</param>
            <param name="generator">A generator function that take the index + start offset of item being generated as a parameter and return a value/instance of type T.</param>
            <returns>A sequence of elements of the type of T.</returns>
            <exception cref="T:System.ArgumentNullException">generator is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate``1(``0,System.Int32,System.Func{``0,System.Int32,``0})">
            <summary>
            Generates a sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements of to generate.</typeparam>
            <param name="start">A starting seed element.</param>
            <param name="count">The number of elements to generate.</param>
            <param name="generator">A generator function that take starting element and an index of item being generated as a parameter and return a value/instance of type T.</param>
            <returns>A sequence of elements of the type of T.</returns>
            <exception cref="T:System.ArgumentNullException">generator is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate``1(System.Double,System.Double,System.Int32,System.Func{System.Double,``0})">
            <summary>
            Generates a sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements of to generate.</typeparam>
            <param name="start">A System.Double starting seed element.</param>
            <param name="step">A System.Double stepping value.</param>
            <param name="count">The number of elements to generate.</param>
            <param name="generator">A generator function that take starting and step element as a parameter and return a value/instance of type T.</param>
            <returns>A sequence of elements of the type of T.</returns>
            <exception cref="T:System.ArgumentNullException">generator is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate``2(``0,``1,System.Int32,System.Func{``0,System.Int32,``1,``0})">
            <summary>
            Generates a sequence of elements.
            </summary>
            <typeparam name="T">The type of the elements of to generate.</typeparam>
            <typeparam name="TStep">The type of the step parameter.</typeparam>
            <param name="start">A starting seed element.</param>
            <param name="step">A stepping value used by the generator function.</param>
            <param name="count">The number of elements to generate.</param>
            <param name="generator">A generator function that take starting and step element as a parameter and return a value/instance of type T.</param>
            <returns>A sequence of elements of the type of T.</returns>
            <exception cref="T:System.ArgumentNullException">generator is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            Generates a sequence of dates.
            </summary>
            <param name="start">The starting date element.</param>
            <param name="step">A stepping time span.</param>
            <param name="count">The number of elements to generate.</param>
            <returns>A sequence of dates.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">step is Zero (TimeSpan.Zero).</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Generate``1(``0,``0,System.Int32)">
            <summary>
            Generates a sequence of numbers.
            </summary>
            <typeparam name="T">The type of the elements of to generate - T must be of numeric type.</typeparam>
            <param name="start">Sequence start element value.</param>
            <param name="step">Sequence increment value.</param>
            <param name="count">Number of elements to generate.</param>
            <returns>A sequence of numbers</returns>
            <exception cref="T:System.InvalidOperationException">Type of T is not a numeric or nullable numeric type.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Range``1(``0,``0,``0)">
            <summary>
            Generates a sequence of numbers.
            </summary>
            <typeparam name="T">The type of the elements of to generate - T must be of numeric type.</typeparam>
            <param name="start">Sequence start element value.</param>
            <param name="step">Sequence increment value.</param>
            <param name="stop">A value the last generate element cannot exceed.</param>
            <returns>A sequence of numbers</returns>
            <exception cref="T:System.InvalidOperationException">Type of T is not a numeric or nullable numeric type.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Random``1(System.Int32)">
            <summary>
            Generates a random sequence of numbers.
            </summary>
            <typeparam name="T">The type of the elements of to generate - T must be of numeric type.</typeparam>
            <param name="count">The Number of elements to generate</param>
            <returns>A sequence of random numbers</returns>
            <exception cref="T:System.InvalidOperationException">Type of T is not a numeric or nullable numeric type.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Random``1(System.Int32,System.Int32)">
            <summary>
            Generates a random sequence of numbers.
            </summary>
            <typeparam name="T">The type of the elements of to generate - T must be of numeric type.</typeparam>
            <param name="count">The Number of elements to generate</param>
            <param name="seed">A seed number to provide to the randomizer.</param>
            <returns>A sequence of random numbers</returns>
            <exception cref="T:System.InvalidOperationException">Type of T is not a numeric or nullable numeric type.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Repeat``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Generate a sequence that is the repetition of another sequence (creating a pattern).
            </summary>
            <typeparam name="T">The type of the elements of the source sequence.</typeparam>
            <param name="source">The sequence to repeat.</param>
            <param name="times">Number of times to repeat the source. </param>
            <returns>a sequence that is the repetition of another sequence.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Combine``3(System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Func{``1,``2,``0})">
            <summary>
            Combines two sequences by applying a custom function on elements from each sequence.
            </summary>
            <typeparam name="TOutput">The Type of elements in the combined sequence.</typeparam>
            <typeparam name="TInput1">The Type of elements in the first sequence.</typeparam>
            <typeparam name="TInput2">The Type of elements in the second sequence.</typeparam>
            <param name="input1">First sequence to operate on.</param>
            <param name="input2">Second sequence to operate on.</param>
            <param name="func">A Function that take two parameters of TInput1 and TInput2 and return a TOutput representing the combined value of the inputs..</param>
            <exception cref="T:System.ArgumentNullException">input1, input2 or func is null.</exception>
            <returns>
            A sequence of elements that are the combination of the two inputs. 
            If input1 and input2 are not of the same length the returned sequence will have as many elements as the shorter of the two inputs.
            </returns>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends the supplied parameters to the source sequence.
            </summary>
            <typeparam name="T">The type of the elements of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="items">List of parameters to append to the source sequence.</param>
            <returns>A new sequence with elements from the source followed by the supplied parameters.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends the source sequence to the supplied parameters.
            </summary>
            <typeparam name="T">The type of the elements of the source sequence.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="items">List of parameters to insert in front of the source sequence.</param>
            <returns>A new sequence with elements the supplied parameters followed by the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.ElementAtMin``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element that yields the minimum value when processed by the selector function. 
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <typeparam name="TSelector">The type of the element returned by the selector of the source sequence. TSelector must implement the IComparable interface.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="selector">A function that return a comparable value used to evaluate the minimum sequence value.</param>
            <returns>The element that yields the minimum value when processed by the selector function.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
            <exception cref="T:System.ArgumentNullException">selector is null.</exception>    
            <exception cref="T:System.ArgumentException">source must have one or more elements.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.ElementAtMax``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element that yields the maximum value when processed by the selector function. 
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <typeparam name="TSelector">The type of the element returned by the selector of the source sequence. TSelector must implement the IComparable interface.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="selector">A function that return a comparable value used to evaluate the maximum sequence value.</param>
            <returns>The element that yields the maximum value when processed by the selector function.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
            <exception cref="T:System.ArgumentNullException">selector is null.</exception>    
            <exception cref="T:System.ArgumentException">source must have one or more elements.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.ElementAtAverage``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns the element that is closest the the average of the values returned by the selector function. 
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <typeparam name="TSelector">The type of the element returned by the selector of the source sequence. TSelector must be numeric.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="selector">A function that return a numeric value used to evaluate the average sequence value.</param>
            <returns>The element that is closest the the average of the values returned by the selector function.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Enumerator.ElementAtAverage``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},LinqLib.Sequence.AverageMatchType)">
            <summary>
            Returns the element that is closest the the average of the values returned by the selector function. 
            </summary>
            <typeparam name="TSource">The type of the elements of the source sequence.</typeparam>
            <typeparam name="TSelector">The type of the element returned by the selector of the source sequence. TSelector must be numeric.</typeparam>
            <param name="source">Source sequence.</param>
            <param name="selector">A function that return a numeric value used to evaluate the average sequence value.</param>
            <param name="matchType">The type of matching to apply when seeking the closest item.</param>
            <returns>The element that is closest the the average of the values returned by the selector function.</returns>
            <remarks>Closest is defined by the match type.</remarks>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>    
            <exception cref="T:System.ArgumentNullException">selector is null.</exception>    
            <exception cref="T:System.ArgumentException">source must have one or more elements.</exception>    
            <exception cref="T:System.InvalidOperationException">Selector must return a numeric value.</exception>    
        </member>
        <member name="T:LinqLib.Sequence.Scrub">
            <summary>
            Provides methods for scrubbing sequences: Rounding, TRuncating, noise removal and filtering.
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Round(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Rounds a sequence of double-precision floating-point values to a specified number of fractional digits.
            </summary>
            <param name="source">A sequence of double-precision floating-point numbers to be rounded.</param>
            <param name="digits">The number of fractional digits in the return values.</param>
            <returns>A sequence double-precision floating-point values rounded to a specified number of fractional digits</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">digits is less than 0 or greater than 15.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Round(System.Collections.Generic.IEnumerable{System.Single},System.Int32)">
            <summary>
            Rounds a sequence of single-precision floating-point values to a specified number of fractional digits.
            </summary>
            <param name="source">A sequence of single-precision floating-point numbers to be rounded.</param>
            <param name="digits">The number of fractional digits in the return values.</param>
            <returns>A sequence single-precision floating-point values rounded to a specified number of fractional digits</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">digits is less than 0 or greater than 15.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Round(System.Collections.Generic.IEnumerable{System.Decimal},System.Int32)">
            <summary>
            Rounds a sequence of decimal values to a specified number of fractional digits.
            </summary>
            <param name="source">A sequence of decimal numbers to be rounded.</param>
            <param name="digits">The number of fractional digits in the return values.</param>
            <returns>A sequence decimal values rounded to a specified number of fractional digits</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">digits is less than 0 or greater than 15.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Truncate(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates the integral part of a elements in a sequence of double-precision floating-point numbers.
            </summary>
            <param name="source">A sequence of numbers to truncate.</param>
            <returns>A sequence of the integral numbers.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Truncate(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Calculates the integral part of a elements in a sequence of single-precision floating-point numbers.
            </summary>
            <param name="source">A sequence of numbers to truncate.</param>
            <returns>A sequence of the integral numbers.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Truncate(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Calculates the integral part of a elements in a sequence of decimal numbers.
            </summary>
            <param name="source">A sequence of numbers to truncate.</param>
            <returns>A sequence of the integral numbers.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Removes all Nan elements from a sequence of double-precision floating-point numbers.
            </summary>
            <param name="source">The sequence to operate on.</param>
            <returns>A sequence of all values from source except Nan values.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Removes all Nan elements from a sequence where the selector produce a Nan.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of elements to operate on.</param>
            <param name="selector">A function that evaluates each source element and return a double-precision floating-point number, possibly a Nan.</param>
            <returns>A sequence of elements that evaluated to a value other than Nan.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Removes all Nan elements from a sequence of single-precision floating-point numbers.
            </summary>
            <param name="source">The sequence to operate on.</param>
            <returns>A sequence of all values from source except Nan values.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Removes all Nan elements from a sequence where the selector produce a Nan.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of elements to operate on.</param>
            <param name="selector">A function that evaluates each source element and return a single-precision floating-point number, possibly a Nan.</param>
            <returns>A sequence of elements that evaluated to a value other than Nan.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Removes all Nan elements from a sequence of nullable double-precision floating-point numbers.
            </summary>
            <param name="source">The sequence to operate on.</param>
            <returns>A sequence of all values from source except Nan values.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Removes all Nan elements from a sequence where the selector produce a Nan.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of elements to operate on.</param>
            <param name="selector">A function that evaluates each source element and return a nullable double-precision floating-point number, possibly a Nan.</param>
            <returns>A sequence of elements that evaluated to a value other than Nan.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Removes all Nan elements from a sequence of nullable single-precision floating-point numbers.
            </summary>
            <param name="source">The sequence to operate on.</param>
            <returns>A sequence of all values from source except Nan values.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNaNs``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Removes all Nan elements from a sequence where the selector produce a Nan.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of elements to operate on.</param>
            <param name="selector">A function that evaluates each source element and return a nullable single-precision floating-point number, possibly a Nan.</param>
            <returns>A sequence of elements that evaluated to a value other than Nan.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNulls``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Removes all null elements from a sequence.
            </summary>
            <typeparam name="T">The type of elements in the source sequence.</typeparam>
            <param name="source">A sequence of elements to operate on.</param>
            <returns>A sequence of all values from source except nulls.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Double},System.Double,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Double})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of double-precision floating-point numbers to operate on.</param>
            <param name="limit">The maximum percent or standard deviations above or below from the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">This override of RemoveNoise cannot be used with filter type 'AbsoluteValue'.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Single},System.Single,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Single})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of single-precision floating-point numbers to operate on.</param>
            <param name="limit">The maximum percent or standard deviations above or below from the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">This override of RemoveNoise cannot be used with filter type 'AbsoluteValue'.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Decimal})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of decimal numbers to operate on.</param>
            <param name="limit">The maximum percent or standard deviations above or below from the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">This override of RemoveNoise cannot be used with filter type 'AbsoluteValue'.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Int64},System.Double,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Int64})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of long numbers to operate on.</param>
            <param name="limit">The maximum percent or standard deviations above or below from the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">This override of RemoveNoise cannot be used with filter type 'AbsoluteValue'.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Int32},System.Double,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Int32})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of integer numbers to operate on.</param>
            <param name="limit">The maximum percent or standard deviations above or below from the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">This override of RemoveNoise cannot be used with filter type 'AbsoluteValue'.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Double})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of double-precision floating-point numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">When calling RemoveNoise with 'AbsoluteValue' filter type option upperLimit cannot be equal to lowerLimit..</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Single,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Single})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of double-precision single-point numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">When calling RemoveNoise with 'AbsoluteValue' filter type option upperLimit cannot be equal to lowerLimit..</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal,System.Decimal,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Decimal})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of decimal numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">When calling RemoveNoise with 'AbsoluteValue' filter type option upperLimit cannot be equal to lowerLimit..</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Int64},System.Double,System.Double,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Int64})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of long numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">When calling RemoveNoise with 'AbsoluteValue' filter type option upperLimit cannot be equal to lowerLimit..</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Int32},System.Double,System.Double,LinqLib.Sequence.NoiseFilterType,System.Nullable{System.Int32})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of integer numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseFilterType">Noise filter mode: Percent Of Average or Standard Deviations, this method do not accept the Absolute Value</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
            <exception cref="T:System.InvalidOperationException">When calling RemoveNoise with 'AbsoluteValue' filter type option upperLimit cannot be equal to lowerLimit..</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Double},System.Double,System.Double,System.Nullable{System.Double})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of double-precision floating-point numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Single},System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of single-precision floating-point numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal,System.Decimal,System.Nullable{System.Decimal})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of decimal numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Int64},System.Double,System.Double,System.Nullable{System.Int64})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of long numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.RemoveNoise(System.Collections.Generic.IEnumerable{System.Int32},System.Double,System.Double,System.Nullable{System.Int32})">
            <summary>
            Replace noise values in a sequence with a predefined value or remove noise values if the replacer is null. 
            </summary>
            <param name="source">A sequence of integer numbers to operate on.</param>
            <param name="upperLimit">The maximum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="lowerLimit">The minimum value, percent or standard deviations above the average that is considered valid (non noise) data.</param>
            <param name="noiseReplacer">the value to replace elements that are considered noise. Passing a null will cause noise elements to be skipped rather than replaced.</param>
            <returns>A sequence of all original values that fall within the range of non noise values.</returns>
            <exception cref="T:System.ArgumentNullException">source is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. 
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of elements to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <returns>A n sequence of elements from the source sequence that satisfy the condition.</returns>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Filters a sequence of values based on a predicate or predefined replacer. 
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of elements to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="replacer">A replacer to return when the predicate fails.</param>
            <returns>A n sequence of elements from the source sequence that satisfy the condition or a replacer.</returns>
            <exception cref="T:System.ArgumentNullException">source or predicate is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <summary>
            Filters a sequence of values based on a predicate or predefined replacer. 
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of elements to filter.</param>
            <param name="predicate">A function to test each element for a condition.</param>
            <param name="replacer">A delegate that will return a replacer when the sourceFilter is false.</param>
            <returns>A n sequence of elements from the source sequence that satisfy the condition or a replacer.</returns>
            <exception cref="T:System.ArgumentNullException">source, predicate or replacer is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Filters a sequence of values based on a corresponding value in a sequence of Booleans. 
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of elements to filter.</param>
            <param name="sourceFilter">A sequence of Booleans that acts as the filter.</param>
            <returns>A n sequence of elements from the source sequence that have the position on true values in the filter sequence.</returns>
            <exception cref="T:System.ArgumentNullException">source or sourceFilter is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Boolean},``0)">
            <summary>
            Filters a sequence of values or replacers based on a corresponding value in a sequence of Booleans. 
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of elements to filter.</param>
            <param name="sourceFilter">A sequence of Booleans that acts as the filter.</param>
            <returns>A n sequence of elements from the source sequence that have the position on true values in the filter sequence or a replacer.</returns>
            <param name="replacer">A replacer to return when the sourceFilter is false.</param>
            <exception cref="T:System.ArgumentNullException">source or sourceFilter is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Boolean},System.Func{``0,``0})">
            <summary>
            Filters a sequence of values or replacers based on a corresponding value in a sequence of Booleans. 
            </summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">A sequence of elements to filter.</param>
            <param name="sourceFilter">A sequence of Booleans that acts as the filter.</param>
            <param name="replacer">A delegate that will return a replacer when the sourceFilter is false.</param>
            <returns>A n sequence of elements from the source sequence that have the position on true values in the filter sequence or a replacer.</returns>    
            <exception cref="T:System.ArgumentNullException">source, sourceFilter or replacer is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.If``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <summary>
             Filters a sequence of values based on a predicate and projects them into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="source">A sequence to filter and transform from.</param>
            <param name="ifCondition">A function to test each element for a condition.</param>
            <param name="thenSelector">A transform function to apply to each element.</param>
            <returns>An sequence of elements that contains elements from the source sequence that satisfy the condition and transformed by the thenSelector.</returns>
            <remarks>This method is the equivalent of combining the Where extension method with the Select extension method.</remarks>
            <exception cref="T:System.ArgumentNullException">source or ifCondition or thenSelector is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Scrub.If``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1},System.Func{``0,``1})">
            <summary>
             Filters a sequence of values based on a predicate and projects them into a new form.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TResult">The type of the value returned by selector.</typeparam>
            <param name="source">A sequence to filter and transform from.</param>
            <param name="ifCondition">A function to test each element for a condition.</param>
            <param name="thenSelector">A transform function to apply to each element that meet the condition.</param>
            <param name="elseSelector">A transform function to apply to each element that fails to meet the condition.</param>
            <returns>An sequence of elements from the source sequence that satisfy the condition and transformed by the thenSelector or fails a condition and transformed by the elseSelector.</returns>
            <exception cref="T:System.ArgumentNullException">source or ifCondition or thenSelector or elseSelector is null.</exception>
        </member>
        <member name="T:LinqLib.Sequence.Combinatorics">
            <summary>
            Provides extensions for permutations and combinations of sequences
            For a good explanation of the various flavors of permutations and combinations go to:
            http://www.mathsisfun.com/combinatorics/combinations-permutations.html
            </summary>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Creates a sequence of all permutations found in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for permutations.</param>
            <param name="selectionSize">Number of elements in each permutation.</param>
            <param name="allowRepetition">Indicates if repetition is allowed within a permutation.</param>
            <returns>A sequence of all permutations found in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Creates a sequence of all combinations found in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for combinations.</param>
            <param name="selectionSize">Number of elements in each combination.</param>
            <param name="allowRepetition">Indicates if repetition is allowed within a combination.</param>
            <returns>A sequence of all combinations found in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.Permutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a sequence of all permutations found with repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for permutations.</param>
            <param name="selectionSize">Number of elements in each permutation.</param>
            <returns>A sequence of all permutations found in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.PermutationsCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Calculates the number of permutations found with repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for permutations.</param>
            <param name="selectionSize">Number of elements in each permutation.</param>
            <returns>Number of permutations found without repetition in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.PermutationsCount(System.Int32,System.Int32)">
            <summary>
            Calculates the number of permutations found with repetition in the supplied pool.
            </summary>
            <param name="poolSize">The size of the pool.</param>
            <param name="selectionSize">Number of elements in each permutation.</param>
            <returns>Number of permutations found without repetition in the supplied pool size.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.UniquePermutations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a sequence of all permutations found without repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for permutations.</param>
            <param name="selectionSize">Number of elements in each permutation.</param>
            <returns>A sequence of all permutations found in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.UniquePermutationsCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Calculates the number of permutations found without repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for permutations.</param>
            <param name="selectionSize">Number of elements in each permutation.</param>
            <returns>Number of permutations found without repetition in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.UniquePermutationsCount(System.Int32,System.Int32)">
            <summary>
            Calculates the number of permutations found without repetition in the supplied pool.
            </summary>
            <param name="poolSize">The size of the pool.</param>
            <param name="selectionSize">Number of elements in each permutation.</param>
            <returns>Number of permutations found without repetition in the supplied pool size.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.Combinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a sequence of all combinations found with repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for combinations.</param>
            <param name="selectionSize">Number of elements in each combination.</param>
            <returns>A sequence of all combinations found in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.CombinationsCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Calculates the number of combinations found with repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for combinations.</param>
            <param name="selectionSize">Number of elements in each combination.</param>
            <returns>Number of combinations found without repetition in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.CombinationsCount(System.Int32,System.Int32)">
            <summary>
            Calculates the number of combinations found with repetition in the supplied pool.
            </summary>
            <param name="poolSize">The size of the pool.</param>
            <param name="selectionSize">Number of elements in each combination.</param>
            <returns>Number of combinations found without repetition in the supplied pool size.</returns>
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.UniqueCombinations``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Creates a sequence of all combinations found without repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for combinations.</param>
            <param name="selectionSize">Number of elements in each combination.</param>
            <returns>A sequence of all combinations found in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.UniqueCombinationsCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Calculates the number of combinations found without repetition in the supplied pool.
            </summary>
            <typeparam name="T">Type of pool elements.</typeparam>    
            <param name="pool">The pool of elements to use for combinations.</param>
            <param name="selectionSize">Number of elements in each combination.</param>
            <returns>Number of combinations found without repetition in the supplied pool.</returns>
            <exception cref="T:System.ArgumentNullException">pool is null.</exception>    
        </member>
        <member name="M:LinqLib.Sequence.Combinatorics.UniqueCombinationsCount(System.Int32,System.Int32)">
            <summary>
            Calculates the number of combinations found without repetition in the supplied pool.
            </summary>
            <param name="poolSize">The size of the pool.</param>
            <param name="selectionSize">Number of elements in each combination.</param>
            <returns>Number of combinations found without repetition in the supplied pool size.</returns>
        </member>
        <member name="T:LinqLib.Sequence.AlignType">
            <summary>
            Describes the possible outcomes of align operation.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.AlignType.Match">
            <summary>
            Left item and right item are a match.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.AlignType.LeftMissing">
            <summary>
            No item on left match current item on right.
            </summary>
        </member>
        <member name="F:LinqLib.Sequence.AlignType.RightMissing">
            <summary>
            No item on right match current item on left.
            </summary>
        </member>
        <member name="T:LinqLib.Array.DoubleComparer">
            <summary>
            A class that provides a way to compare double types while ignoring minor floating point arithmetic errors
            </summary>
        </member>
        <member name="M:LinqLib.Array.DoubleComparer.#ctor">
            <summary>
            Initializes a new instance of DoubleComparer class with default sensitivity value of 0.000001.
            </summary>
        </member>
        <member name="M:LinqLib.Array.DoubleComparer.#ctor(System.Double)">
            <summary>
            Initializes a new instance of DoubleComparer class.
            </summary>
            <param name="sensitivity">A value representing the sensitivity of the comparisons performed by this class.</param>
        </member>
        <member name="M:LinqLib.Array.DoubleComparer.Equals(System.Double,System.Double)">
            <summary>
            Determines whether the specified values are equal or within the sensitivity range.
            </summary>
            <param name="x">The first double to compare.</param>
            <param name="y">The second double to compare.</param>
            <returns>true if the specified objects are equal or within the sensitivity range; otherwise, false.</returns>
        </member>
        <member name="M:LinqLib.Array.DoubleComparer.GetHashCode(System.Double)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The System.Object for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
    </members>
</doc>
